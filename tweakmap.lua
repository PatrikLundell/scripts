--  Reads <DF directory>\data\init\exported_map.txt generated by exportmap.lua, presents the data as an overlay over DF (like gui/gm-editor) that presents the expected world map, and allows you to change the PSV values (displaying changes), and save them back to the same file.
--  Note that the presented and edited values will differ from those in the saved file for temperature, as the script attempts to compensate for altitude and latitude so the PSV values should result in the entered values when used in the world.
--[====[

tweakmap
========
--  The biome determination logic is mainly copied and adapted from https://github.com/ragundo/exportmaps/blob/master/cpp/df_utils/biome_type.cpp#L105
--
]====]
local gui = require 'gui'
local dialog = require 'gui.dialogs'
local widgets =require 'gui.widgets'
local guiScript = require 'gui.script'

--================================================================
--  The Grid widget defines an pen supporting X/Y character display grid supporting display of
--  a grid larger than the frame allows through a panning viewport. The init function requires
--  the specification of the width and height attributes that defines the grid dimensions.
--  The grid coordinates are 0 based.
--  Version 0.1 2017-07-30
--  Corrected height instead of width bug in 0.1.
--
Grid = defclass (Grid, widgets.Widget)
Grid.ATTRS = 
  {width = DEFAULT_NIL,
   height = DEFAULT_NIL}

--================================================================

function Grid:init ()
  if type (self.width) ~= 'number' or
     type (self.height) ~= 'number' or
     type (self.frame.w) ~= 'number' or
     type (self.frame.h) ~= 'number' or
     self.width < 0 or
     self.height < 0 then
    error ("Grid widgets have to have their widths and heights set permanently on initiation")
    return
  end
  
  self.grid = dfhack.penarray.new (self.width, self.height)
  
  self.viewport = {x1 = 0,
                   x2 = self.frame.w - 1,
                   y1 = 0,
                   y2 = self.frame.h - 1}  
end

--================================================================

function Grid:panTo (x, y)
  local x_size = self.viewport.x2 - self.viewport.x1 + 1
  local y_size = self.viewport.y2 - self.viewport.y1 + 1
  
  self.viewport.x1 = x

  if self.viewport.x1 + x_size > self.width then
    self.viewport.x1 = self.width - x_size
  end
  
  if self.viewport.x1 < 0 then
    self.viewport.x1 = 0
  end
  
  self.viewport.x2 = self.viewport.x1 + x_size - 1
  
  self.viewport.y1 = y
  
  if self.viewport.y1 + y_size > self.height then
    self.viewport.y1 = self.height - y_size
  end
  
  if self.viewport.y1 < 0 then
    self.viewport.y1 = 0
  end
  
  self.viewport.y2 = self.viewport.y1 + y_size - 1
end

--================================================================
--  Pans the viewport in the X and Y dimensions the number of steps specified by the parameters.
--  It will stop the panning at 0, however, and will not pan outside of the grid (a grid smaller)
--  than the frame will still have non grid parts in the frame, of course).
--
function Grid:pan (x, y)
  self:panTo (self.viewport.x1 + x, self.viewport.y1 + y)
end

--================================================================

function Grid:panCenter (x, y)
  self:panTo (x - math.floor ((self.viewport.x2 - self.viewport.x1 + 1) / 2),
              y - math.floor ((self.viewport.y2 - self.viewport.y1 + 1) / 2))
end

--================================================================
--  Assigns a value to the specified grid (not frame) coordinates. The 'pen'
--  parameter has to be a DFHack 'pen' table or object.
--
function Grid:set (x, y, pen)
  if x < 0 or x >= self.width then
    error ("Grid:set error: x out of bounds " .. tostring (x) .. " vs 0 - " .. tostring (self.width - 1))
    return
    
  elseif y < 0 or y >= self.height then
    error ("Grid:set error: y out of bounds " .. tostring (y) .. " vs 0 - " .. tostring (self.height - 1))
    return
  end

  self.grid:set_tile (x, y, pen)  
end

--================================================================
--  Returns the data at position x, y in the grid.
--
function Grid:get (x, y)
  if x < 0 or x >= self.width then
    error ("Grid:set error: x out of bounds " .. tostring (x) .. " vs 0 - " .. tostring (self.width - 1))
    return
    
  elseif y < 0 or y >= self.height then
    error ("Grid:set error: y out of bounds " .. tostring (y) .. " vs 0 - " .. tostring (self.height - 1))
    return
  else
    return self.grid:get_tile (x, y)
  end
end

--================================================================
--  Renders the contents within the viewport into the frame.
--
function Grid:onRenderBody (dc)
  self.grid:draw (self.frame.l,
                  self.frame.t,
                  self.viewport.x2 - self.viewport.x1 + 1,
                  self.viewport.y2 - self.viewport.y1 + 1,
                  self.viewport.x1,
                  self.viewport.y1)
end

--================================================================

ResizeFramedScreen = defclass (ResizeFramedScreen, gui.FramedScreen)
ResizeFramedScreen.ATTRS = 
  {Resize_Callback = DEFAULT_NIL}

--================================================================

function ResizeFramedScreen:onResize (w, h)
  self:updateLayout (gui.ViewRect {rect = gui.mkdims_wh (0, 0 , w, h)})
  if self.Resize_Callback then
    self.Resize_Callback (w, h)
  end
end

--================================================================
--================================================================

function tweakmap ()
  persist_screen = persist_screen or nil --does nothing, here just to remind everyone
  local Focus = "Main"
  local Map_Grid

  --  Couldn't find the definition of the enum.
  --
  local pole_map = {}
    pole_map [0] = "NONE"
    pole_map [1] = "NORTH_OR_SOUTH"
    pole_map [2] = "NORTH_AND_OR_SOUTH"
    pole_map [3] = "NORTH"
    pole_map [4] = "SOUTH" 
    pole_map [5] = "NORTH_AND_SOUTH"

  function map_pole (s)
    if s == "NONE" then
      return 0
    elseif s == "NORTH_OR_SOUTH" then
      return 1
    elseif s == "NORTH_AND_OR_SOUTH" then
      return 2
    elseif s == "NORTH" then
      return 3
    elseif s == "SOUTH" then
      return 4
    elseif s == "NORTH_AND_SOUTH" then
      return 5
    end
  end
  
  function pole_to_string (pole)
    if pole == -1 then
      return "NONE"
    elseif pole == 0 then
      return "NORTH"
    elseif pole == 1 then
      return "SOUTH"
    else
      return "BOTH"
    end
  end
  
  function boolean_to_int (b)
    if true then
      return 1
    else
      return 0
    end
  end
  
  function int_to_boolean (int)
    if int == 0 then
      return false
    else
      return true
    end
  end
  
  local temperature_north_257 =
  {-81, -80, -79, -78, -76, -75, -74, -73, -72, -70, -69, -68, -67, -66, -64, -63,
   -62, -61, -60, -59, -58, -57, -56, -55, -54, -53, -52, -51, -50, -49, -48, -47,
   -46, -45, -44, -43, -42, -41, -40, -39, -38, -37, -36, -36, -35, -34, -33, -32,
   -31, -30, -29, -28, -28, -27, -26, -25, -25, -24, -23, -23, -22, -21, -21, -20,
   -19, -19, -18, -18, -17, -16, -16, -15, -15, -14, -14, -13, -13, -12, -12, -11,
   -11, -10, -10, -9, -9, -8, -8, -8, -7, -7, -6, -6, -6, -5, -5, -5,
   -4, -4, -4, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1,
   -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,
   1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 6,
   7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15,
   16, 16, 17, 18, 18, 19, 20, 20, 21, 22, 23, 24, 24, 25, 26, 27,
   28, 29, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
   43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 60,
   61, 62, 64, 65, 66, 68, 69, 70, 72, 73, 74, 76, 77, 79, 80, 82,
   83, 85, 86, 88, 89, 91, 92, 94, 96, 97, 99, 100, 102, 104, 105, 107,
   109}
  
  local temperature_north_65 =
  {-85, -80, -75, -70, -65, -60, -56, -52, -48, -44, -40, -36, -33, -30, -27, -24,
   -21, -18, -16, -14, -12, -10, -8, -6, -5, -4, -3, -2, -1, 0, 0, 0,
   0, 0, 0, 1, 1, 2, 4, 5, 7, 9, 11, 13, 16, 18, 21, 25,
   28, 32, 36, 40, 44, 49, 53, 58, 64, 69, 75, 81, 87, 93, 100, 106,
   113}
  
  local temperature_north_33 =
  {-85, -75, -65, -56, -48, -40, -33, -27, -21, -16, -12, -8, -5, -3, -1, 0,
   0, 0, 2, 4, 8, 12, 18, 24, 32, 40, 50, 60, 72, 84, 98, 112,
   128}
  
  local temperature_north_17 =
  {-64, -49, -36, -25, -16, -9, -4, -1, 0, 1, 4, 9, 16, 25, 36, 49, 64}
  
  local elevation_hill_1 = 228  --  Elevation at which temperature is reduced by 1
  local elevation_hill_2 = 280  --  Elevation at which temperature is reduced by 2
  local elevation_temperature_mountain =
  {-2, -2, -2, -2, -2,                  --  300 - 304
   -3, -3, -3, -3, -3, -3, -3, -3, -3,  --  305 - 313
   -4, -4, -4, -4, -4, -4, -4,          --  314 - 320
   -5, -5, -5, -5, -5, -5, -5,          --  321 - 327
   -6, -6, -6, -6, -6, -6,              --  328 - 333
   -7, -7, -7, -7, -7, -7,              --  334 - 339
   -8, -8, -8, -8, -8,                  --  340 - 344
   -9, -9, -9, -9, -9,                  --  345 - 349
   -10, -10, -10, -10, -10,             --  350 - 354
   -11, -11, -11, -11, -11,             --  355 - 359
   -12, -12, -12, -12, -12,             --  360 - 364
   -13, -13, -13, -13,                  --  365 - 368
   -14, -14, -14, -14,                  --  369 - 372
   -15, -15, -15, -15,                  --  373 - 376
   -16, -16, -16, -16,                  --  377 - 380
   -17, -17, -17, -17,                  --  381 - 384
   -18, -18, -18,                       --  385 - 387
   -19, -19, -19, -19,                  --  388 - 391
   -20, -20, -20,                       --  392 - 394
   -21, -21, -21, -21,                  --  395 - 398
   -22, -22, -22}                       --  399 - 400

  local param = {}
  local map = {}
  local pole
  local x = 0
  local y = 0
  local cursor_x = 0
  local cursor_y = 0
  local tWorld
  local copy_set = {elevation = 200,
                    rainfall = 50,
                    temperature = 50,
                    drainage = 50,
                    volcanism = 50,
                    savagery = 50}
  local ignore_elevation = false
  local ignore_rainfall = false
  local ignore_temperature = false
  local ignore_drainage = false
  local ignore_volcanism = false
  local ignore_savagery = false
   
  --============================================================

  local keybindings = {
    tweakmap = 
      {key = "CUSTOM_Z",
       desc = "Show the world map biomes pre world gen                   "},
    biome = 
      {key = "CUSTOM_B",
       desc = "Specify a biome to change the cursor map tile to          "},
    elevation = 
      {key = "CUSTOM_E",
       desc = "Prompt to change the Elevation value of cursor map tile   "},
    rainfall = 
      {key = "CUSTOM_R",
       desc = "Prompt to change the Rainfall value of cursor map tile    "},
    temperature = 
      {key = "CUSTOM_T",
       desc = "Prompt to change the Temperature value of cursor map tile "},
    drainage = 
      {key = "CUSTOM_D",
       desc = "Prompt to change the Drainage value of cursor map tile    "},
    volcanism = 
      {key = "CUSTOM_V",
       desc = "Prompt to change the Volcanism value of cursor map tile   "},
    savagery = 
      {key = "CUSTOM_S",
       desc = "Prompt to change the Savagery value of cursor map tile    "},
    write_file = 
      {key = "CUSTOM_W",
       desc = "Save the current state to export_map.txt                  "},
    save_exit = 
      {key = "CUSTOM_X",
       desc = "Save the current state to export_map.txt and exit         "},    
    copy =
      {key = "CUSTOM_C",
       desc = "Copy the parameters of the cursor tile                    "},
    paste =
      {key = "CUSTOM_P",
       desc = "Paste the copied parameters (default if not copied)       "},
    ignore =
      {key = "CUSTOM_I",
       desc = "Ignore specificed PSV parameter when writing data         "},
    up =
      {key = "CURSOR_UP",
       desc = "Move cursor 1 step upwards"},
    down =
      {key = "CURSOR_DOWN",
       desc = "Move cursor 1 step downwards"},
    left =
       {key = "CURSOR_LEFT",
       desc = "Move cursor 1 step to the left"},
    right =
      {key = "CURSOR_RIGHT",
       desc = "Move cursor 1 step to the right"},
    upleft =
      {key = "CURSOR_UPLEFT",
       desc = "Move cursor 1 step up to the left"},
    upright =
      {key = "CURSOR_UPRIGHT",
       desc = "Move cursor 1 step up to the right"},
    downleft =
      {key = "CURSOR_DOWNLEFT",
       desc = "Move cursor 1 step down to the left"},
    downright =
      {key = "CURSOR_DOWNRIGHT",
       desc = "Move cursor 1 step down to the right"},
    up_fast =
      {key = "CURSOR_UP_FAST",
       desc = "Move cursor 10 step upwards"},
    down_fast =
      {key = "CURSOR_DOWN_FAST",
       desc = "Move cursor 10 step downwards"},
    left_fast =
      {key = "CURSOR_LEFT_FAST",
       desc = "Move cursor 10 step to the left"},
    right_fast =
      {key = "CURSOR_RIGHT_FAST",
       desc = "Move cursor 10 step to the right"},
    upleft_fast =
      {key = "CURSOR_UPLEFT_FAST",
       desc = "Move cursor 10 step up to the left"},
    upright_fast =
      {key = "CURSOR_UPRIGHT_FAST",
       desc = "Move cursor 10 step up to the right"},
    downleft_fast =
      {key = "CURSOR_DOWNLEFT_FAST",
       desc = "Move cursor 10 step down to the left"},
    downright_fast =
      {key = "CURSOR_DOWNRIGHT_FAST",
       desc = "Move cursor 10 step down to the right"},
   help =
     {key = "HELP",
      desc = "Show this help/info                                       "},
  }
  --============================================================
  
  function Read ()
    local in_file = io.open (dfhack.getDFPath ().."\\data\\init\\exported_map.txt", "r")
  
    if in_file == nil then
      dfhack.color (COLOR_LIGHTRED)
      dfhack.println ("tweakmap fails to find " .. dfhack.getDFPath() .. "\\data\\init\\exported_map.txt")
      dfhack.color (COLOR_RESET)
      return false
    end
  
    param.ranges = {}
    param.ranges [0] = {}
    param.ranges [1] = {}
    param.ranges [2] = {}
    param.ranges [3] = {}
    param.region_counts = {}
    param.region_counts [0] = {}
    param.region_counts [1] = {}
    param.region_counts [2] = {}
  
    local map_elevation_y = 0
    local map_rainfall_y = 0
    local map_temperature_y = 0
    local map_drainage_y = 0
    local map_volcanism_y = 0
    local map_savagery_y = 0
  
    local line
    local end_bracket
    local first_colon
    local second_colon
    local third_colon
    local fourth_colon
    local fifth_colon
    local sixth_colon
  
    while true do
      line = in_file:read ()
    
      if line == nil then
        break
      end
    
      first_colon = line:find (":")
      end_bracket = line:find ("]")
    
      if first_colon ~= nil and end_bracket ~= nil then
        second_colon = line:find (":", first_colon + 1)
      
        if second_colon == nil then
          third_colon = nil
        else
          third_colon = line:find (":", second_colon + 1)
        end
        
        if third_colon == nil then
          fourth_colon = nil
        else
          fourth_colon = line:find (":", third_colon + 1)
        end
        
        if fourth_colon == nil then
          fifth_colon = nil
        else
          fifth_colon = line:find (":", fourth_colon + 1)
        end
      
        if fifth_colon == nil then
          sixth_colon = nil
        else
          sixth_colon = line:find (":", fifth_colon + 1)
        end
    
        if line:find ("TITLE:") then
          param.title = line:sub (first_colon + 1, end_bracket - 1)
      
        elseif line:find ("SEED:") and not line:find ("_SEED:") then
          param.seed = line:sub (first_colon + 1, end_bracket - 1)
      
        elseif line:find ("HISTORY_SEED:") then
          param.history_seed = line:sub (first_colon + 1, end_bracket - 1)
      
        elseif line:find ("NAME_SEED:") then
          param.name_seed = line:sub (first_colon + 1, end_bracket - 1)
      
        elseif line:find ("CREATURE_SEED:") then
          param.creature_seed = line:sub (first_colon + 1, end_bracket - 1)
      
        elseif line:find ("DIM:") then
          if second_colon ~= nil then
            param.dim_x = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.dim_y = tonumber (line:sub (second_colon + 1, end_bracket - 1))
          end
      
        elseif line:find ("EMBARK_POINTS:") then
          param.embark_points = tonumber (line:sub (first_colon + 1, end_bracket - 1))
      
        elseif line:find ("END_YEAR:") and not line:find ("_END_YEAR:") then
          param.end_year = tonumber (line:sub (first_colon + 1, end_bracket - 1))
      
        elseif line:find ("BEAST_END_YEAR:") then
          if second_colon ~= nil then
            param.beast_end_year = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.beast_end_year_percent = tonumber (line:sub (second_colon + 1, end_bracket - 1))
          end
      
        elseif line:find ("REVEAL_ALL_HISTORY:") then
          param.reveal_all_history = tonumber (line:sub (first_colon + 1, end_bracket - 1))
     
        elseif line:find ("CULL_HISTORICAL_FIGURES:") then
          param.cull_historical_figures = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ELEVATION:") then
          if fourth_colon ~= nil then
            param.ranges [0] [df.worldgen_range_type.ELEVATION] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.ranges [1] [df.worldgen_range_type.ELEVATION] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.ranges [2] [df.worldgen_range_type.ELEVATION] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.ranges [3] [df.worldgen_range_type.ELEVATION] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))          
          end
        
        elseif line:find ("RAINFALL:") then
          if fourth_colon ~= nil then
            param.ranges [0] [df.worldgen_range_type.RAINFALL] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.ranges [1] [df.worldgen_range_type.RAINFALL] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.ranges [2] [df.worldgen_range_type.RAINFALL] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.ranges [3] [df.worldgen_range_type.RAINFALL] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))          
          end
      
        elseif line:find ("TEMPERATURE:") then
          if fourth_colon ~= nil then
            param.ranges [0] [df.worldgen_range_type.TEMPERATURE] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.ranges [1] [df.worldgen_range_type.TEMPERATURE] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.ranges [2] [df.worldgen_range_type.TEMPERATURE] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.ranges [3] [df.worldgen_range_type.TEMPERATURE] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))          
          end
        
        elseif line:find ("DRAINAGE:") then
          if fourth_colon ~= nil then
            param.ranges [0] [df.worldgen_range_type.DRAINAGE] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.ranges [1] [df.worldgen_range_type.DRAINAGE] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.ranges [2] [df.worldgen_range_type.DRAINAGE] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.ranges [3] [df.worldgen_range_type.DRAINAGE] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))          
          end
        
        elseif line:find ("VOLCANISM:") then
          if fourth_colon ~= nil then
            param.ranges [0] [df.worldgen_range_type.VOLCANISM] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.ranges [1] [df.worldgen_range_type.VOLCANISM] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.ranges [2] [df.worldgen_range_type.VOLCANISM] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.ranges [3] [df.worldgen_range_type.VOLCANISM] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))          
          end
        
        elseif line:find ("SAVAGERY:") then
          if fourth_colon ~= nil then
            param.ranges [0] [df.worldgen_range_type.SAVAGERY] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.ranges [1] [df.worldgen_range_type.SAVAGERY] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.ranges [2] [df.worldgen_range_type.SAVAGERY] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.ranges [3] [df.worldgen_range_type.SAVAGERY] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))          
          end
        
        elseif line:find ("ELEVATION_FREQUENCY:") then
          if sixth_colon ~= nil then
            param.elevation_frequency = {}
            param.elevation_frequency [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.elevation_frequency [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.elevation_frequency [2] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.elevation_frequency [3] = tonumber (line:sub (fourth_colon + 1, fifth_colon - 1))
            param.elevation_frequency [4] = tonumber (line:sub (fifth_colon + 1, sixth_colon - 1))
            param.elevation_frequency [5] = tonumber (line:sub (sixth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("RAIN_FREQUENCY:") then
          if sixth_colon ~= nil then
            param.rain_frequency = {}
            param.rain_frequency [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.rain_frequency [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.rain_frequency [2] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.rain_frequency [3] = tonumber (line:sub (fourth_colon + 1, fifth_colon - 1))
            param.rain_frequency [4] = tonumber (line:sub (fifth_colon + 1, sixth_colon - 1))
            param.rain_frequency [5] = tonumber (line:sub (sixth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("DRAINAGE_FREQUENCY:") then
          if sixth_colon ~= nil then
            param.drainage_frequency = {}
            param.drainage_frequency [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.drainage_frequency [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.drainage_frequency [2] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.drainage_frequency [3] = tonumber (line:sub (fourth_colon + 1, fifth_colon - 1))
            param.drainage_frequency [4] = tonumber (line:sub (fifth_colon + 1, sixth_colon - 1))
            param.drainage_frequency [5] = tonumber (line:sub (sixth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("TEMPERATURE_FREQUENCY:") then
          if sixth_colon ~= nil then
            param.temperature_frequency = {}
            param.temperature_frequency [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.temperature_frequency [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.temperature_frequency [2] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.temperature_frequency [3] = tonumber (line:sub (fourth_colon + 1, fifth_colon - 1))
            param.temperature_frequency [4] = tonumber (line:sub (fifth_colon + 1, sixth_colon - 1))
            param.temperature_frequency [5] = tonumber (line:sub (sixth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("VOLCANISM_FREQUENCY:") then
          if sixth_colon ~= nil then
            param.volcanism_frequency = {}
            param.volcanism_frequency [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.volcanism_frequency [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.volcanism_frequency [2] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.volcanism_frequency [3] = tonumber (line:sub (fourth_colon + 1, fifth_colon - 1))
            param.volcanism_frequency [4] = tonumber (line:sub (fifth_colon + 1, sixth_colon - 1))
            param.volcanism_frequency [5] = tonumber (line:sub (sixth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("SAVAGERY_FREQUENCY:") then
          if sixth_colon ~= nil then
            param.savagery_frequency = {}
            param.savagery_frequency [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.savagery_frequency [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.savagery_frequency [2] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.savagery_frequency [3] = tonumber (line:sub (fourth_colon + 1, fifth_colon - 1))
            param.savagery_frequency [4] = tonumber (line:sub (fifth_colon + 1, sixth_colon - 1))
            param.savagery_frequency [5] = tonumber (line:sub (sixth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("POLE:") then
          param.pole = map_pole (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("MINERAL_SCARCITY:") then
          param.mineral_scarcity = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("MEGABEAST_CAP:") and not line:find ("SEMIMEGABEAST_CAP:") then
          param.megabeast_cap = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("SEMIMEGABEAST_CAP:") then
          param.semimegabeast_cap = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("TITAN_NUMBER:") then
          param.titan_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
    
        elseif line:find ("TITAN_ATTACK_TRIGGER:") then
          if third_colon ~= nil then
            param.titan_attack_trigger = {}
            param.titan_attack_trigger [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.titan_attack_trigger [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.titan_attack_trigger [2] = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("DEMON_NUMBER:") then
          param.demon_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("NIGHT_TROLL_NUMBER:") then
          param.night_troll_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("BOGEYMAN_NUMBER:") then
          param.bogeyman_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("NIGHTMARE_NUMBER:") then
          param.nightmare_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("VAMPIRE_NUMBER:") then
          param.vampire_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("WEREBEAST_NUMBER:") then
          param.werebeast_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("WEREBEAST_ATTACK_TRIGGER:") then
          if third_colon ~= nil then
            param.werebeast_attack_trigger = {}
            param.werebeast_attack_trigger [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.werebeast_attack_trigger [1] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.werebeast_attack_trigger [2] = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("SECRET_NUMBER:") then
          param.secret_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
          elseif line:find ("REGIONAL_INTERACTION_NUMBER:") then
          param.regional_interaction_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("DISTURBANCE_INTERACTION_NUMBER:") then
          param.disturbance_interaction_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("EVIL_CLOUD_NUMBER:") then
          param.evil_cloud_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("EVIL_RAIN_NUMBER:") then
          param.evil_rain_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("GENERATE_DIVINE_MATERIALS:") then
          param.generate_divine_materials = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALLOW_DIVINATION:") then
          param.allow_divination = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALLOW_DEMONIC_EXPERIMENTS:") then
          param.allow_demonic_experiments = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALLOW_NECROMANCER_EXPERIMENTS:") then
          param.allow_necromancer_experiments = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALLOW_NECROMANCER_LIEUTENANTS:") then
          param.allow_necromancer_lieutenants = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALLOW_NECROMANCER_GHOULS:") then
          param.allow_necromancer_ghouls = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALLOW_NECROMANCER_SUMMONS:") then
          param.allow_necromancer_summons = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("GOOD_SQ_COUNTS:") then
          if third_colon ~= nil then
            param.good_sq_counts_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.good_sq_counts_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.good_sq_counts_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end 
         
        elseif line:find ("EVIL_SQ_COUNTS:") then
          if third_colon ~= nil then
            param.evil_sq_counts_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.evil_sq_counts_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.evil_sq_counts_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end

        elseif line:find ("PEAK_NUMBER_MIN:") then
          param.peak_number_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))

        elseif line:find ("PARTIAL_OCEAN_EDGE_MIN:") then
          param.partial_ocean_edge_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("COMPLETE_OCEAN_EDGE_MIN:") then
          param.complete_ocean_edge_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("VOLCANO_MIN:") then
          param.volcano_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("REGION_COUNTS:SWAMP:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.SWAMP] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.SWAMP] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.SWAMP] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("REGION_COUNTS:DESERT:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.DESERT] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.DESERT] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.DESERT] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("REGION_COUNTS:FOREST:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.FOREST] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.FOREST] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.FOREST] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("REGION_COUNTS:MOUNTAINS:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.MOUNTAINS] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.MOUNTAINS] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.MOUNTAINS] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("REGION_COUNTS:OCEAN:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.OCEAN] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.OCEAN] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.OCEAN] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("REGION_COUNTS:GLACIER:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.GLACIER] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.GLACIER] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.GLACIER] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("REGION_COUNTS:TUNDRA:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.TUNDRA] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.TUNDRA] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.TUNDRA] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("REGION_COUNTS:GRASSLAND:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.GRASSLAND] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.GRASSLAND] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.GRASSLAND] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("REGION_COUNTS:HILLS:") then
          if fourth_colon ~= nil then
            param.region_counts [0] [df.worldgen_region_type.HILLS] = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.region_counts [1] [df.worldgen_region_type.HILLS] = tonumber (line:sub (third_colon + 1, fourth_colon - 1))
            param.region_counts [2] [df.worldgen_region_type.HILLS] = tonumber (line:sub (fourth_colon + 1, end_bracket - 1))
          end

        elseif line:find ("EROSION_CYCLE_COUNT:") then
          param.erosion_cycle_count = tonumber (line:sub (first_colon + 1, end_bracket - 1))
          
        elseif line:find ("RIVER_MINS:") then
          if second_colon ~= nil then
            param.river_mins = {}
            param.river_mins [0] = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.river_mins [1] = tonumber (line:sub (second_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("PERIODICALLY_ERODE_EXTREMES:") then
          param.periodically_erode_extremes = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("OROGRAPHIC_PRECIPITATION:") then
          param.orographic_precipitation = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("SUBREGION_MAX:") then
          param.subregion_max = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_COUNT:") then
          param.cavern_layer_count = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_OPENNESS_MIN:") then
          param.cavern_layer_openness_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_OPENNESS_MAX:") then
          param.cavern_layer_openness_max = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_PASSAGE_DENSITY_MIN:") then
          param.cavern_layer_passage_density_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_PASSAGE_DENSITY_MAX:") then
          param.cavern_layer_passage_density_max = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_WATER_MIN:") then
          param.cavern_layer_water_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVERN_LAYER_WATER_MAX:") then
          param.cavern_layer_water_max = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("HAVE_BOTTOM_LAYER_1:") then
          param.have_bottom_layer_1 = int_to_boolean (tonumber (line:sub (first_colon + 1, end_bracket - 1)))
        
        elseif line:find ("HAVE_BOTTOM_LAYER_2:") then
          param.have_bottom_layer_2 = int_to_boolean (tonumber (line:sub (first_colon + 1, end_bracket - 1)))
        
        elseif line:find ("LEVELS_ABOVE_GROUND:") then
          param.levels_above_ground = tonumber (line:sub (first_colon + 1, end_bracket - 1))
    
        elseif line:find ("LEVELS_ABOVE_LAYER_1:") then
          param.levels_above_layer_1 = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("LEVELS_ABOVE_LAYER_2:") then
          param.levels_above_layer_2 = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("LEVELS_ABOVE_LAYER_3:") then
          param.levels_above_layer_3 = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("LEVELS_ABOVE_LAYER_4:") then
          param.levels_above_layer_4 = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("LEVELS_ABOVE_LAYER_5:") then
          param.levels_above_layer_5 = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("LEVELS_AT_BOTTOM:") then
          param.levels_at_bottom = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVE_MIN_SIZE:") then
          param.cave_min_size = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("CAVE_MAX_SIZE:") then
          param.cave_max_size = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("MOUNTAIN_CAVE_MIN:") and not line:find ("NON_MOUNTAIN_CAVE_MIN:") then
          param.mountain_cave_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("NON_MOUNTAIN_CAVE_MIN:") then
          param.non_mountain_cave_min = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ALL_CAVES_VISIBLE:") then
          param.all_caves_visible = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("SHOW_EMBARK_TUNNEL:") then
          param.show_embark_tunnel = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("TOTAL_CIV_NUMBER:") then
          param.total_civ_number = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("TOTAL_CIV_POPULATION:") then
          param.total_civ_population = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("SITE_CAP:") then
          param.site_cap = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("PLAYABLE_CIVILIZATION_REQUIRED:") then
          param.playable_civilization_required = tonumber (line:sub (first_colon + 1, end_bracket - 1))
        
        elseif line:find ("ELEVATION_RANGES:") then
          if third_colon ~= nil then
            param.elevation_ranges_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.elevation_ranges_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.elevation_ranges_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end

        elseif line:find ("RAIN_RANGES:") then
          if third_colon ~= nil then
            param.rain_ranges_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.rain_ranges_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.rain_ranges_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end

        elseif line:find ("DRAINAGE_RANGES:") then
          if third_colon ~= nil then
            param.drainage_ranges_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.drainage_ranges_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.drainage_ranges_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("SAVAGERY_RANGES:") then
          if third_colon ~= nil then
            param.savagery_ranges_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.savagery_ranges_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.savagery_ranges_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("VOLCANISM_RANGES:") then
          if third_colon ~= nil then
            param.volcanism_ranges_0 = tonumber (line:sub (first_colon + 1, second_colon - 1))
            param.volcanism_ranges_1 = tonumber (line:sub (second_colon + 1, third_colon - 1))
            param.volcanism_ranges_2 = tonumber (line:sub (third_colon + 1, end_bracket - 1))
          end
        
        elseif line:find ("PS_EL:") then
          local x = 0
          local current_colon = first_colon
          local next_colon

          while current_colon ~= nil do
            if map [x] == nil then
              map [x] = {}
            end
                
            if map [x] [map_elevation_y] == nil then
              map [x] [map_elevation_y] = {}
            end

            next_colon = line:find (":", current_colon + 1)
         
            if next_colon == nil then
              map [x] [map_elevation_y].elevation = tonumber (line:sub (current_colon + 1, end_bracket - 1))
            else
              map [x] [map_elevation_y].elevation = tonumber (line:sub (current_colon + 1, next_colon - 1))
            end
          
            current_colon = next_colon
            x = x + 1
          end
        
          map_elevation_y = map_elevation_y + 1
        
        elseif line:find ("PS_RF:") then
          local x = 0
          local current_colon = first_colon
          local next_colon

          while current_colon ~= nil do
            if map [x] == nil then
              map [x] = {}
              end
                
            if map [x] [map_rainfall_y] == nil then
              map [x] [map_rainfall_y] = {}
            end

            next_colon = line:find (":", current_colon + 1)
         
            if next_colon == nil then
              map [x] [map_rainfall_y].rainfall = tonumber (line:sub (current_colon + 1, end_bracket - 1))
            else
              map [x] [map_rainfall_y].rainfall = tonumber (line:sub (current_colon + 1, next_colon - 1))
            end
          
            current_colon = next_colon
            x = x + 1
          end
        
          map_rainfall_y = map_rainfall_y + 1
        
        elseif line:find ("PS_TP:") then
          local x = 0
          local current_colon = first_colon
          local next_colon

          while current_colon ~= nil do
            if map [x] == nil then
              map [x] = {}
            end
                
            if map [x] [map_temperature_y] == nil then
              map [x] [map_temperature_y] = {}
            end

            next_colon = line:find (":", current_colon + 1)
         
            if next_colon == nil then
              map [x] [map_temperature_y].temperature = tonumber (line:sub (current_colon + 1, end_bracket - 1))
            else
              map [x] [map_temperature_y].temperature = tonumber (line:sub (current_colon + 1, next_colon - 1))
            end
          
            current_colon = next_colon
            x = x + 1
          end
        
          map_temperature_y = map_temperature_y + 1
        
        elseif line:find ("PS_DR:") then
          local x = 0
          local current_colon = first_colon
          local next_colon

          while current_colon ~= nil do
             if map [x] == nil then
              map [x] = {}
            end
                
            if map [x] [map_drainage_y] == nil then
              map [x] [map_drainage_y] = {}
            end

            next_colon = line:find (":", current_colon + 1)
         
            if next_colon == nil then
              map [x] [map_drainage_y].drainage = tonumber (line:sub (current_colon + 1, end_bracket - 1))
            else
              map [x] [map_drainage_y].drainage = tonumber (line:sub (current_colon + 1, next_colon - 1))
            end
          
            current_colon = next_colon
            x = x + 1
          end
        
          map_drainage_y = map_drainage_y + 1
        
        elseif line:find ("PS_VL:") then
          local x = 0
          local current_colon = first_colon
          local next_colon

          while current_colon ~= nil do
            if map [x] == nil then
              map [x] = {}
            end
                
            if map [x] [map_volcanism_y] == nil then
              map [x] [map_volcanism_y] = {}
            end

            next_colon = line:find (":", current_colon + 1)
         
            if next_colon == nil then
              map [x] [map_volcanism_y].volcanism = tonumber (line:sub (current_colon + 1, end_bracket - 1))
            else
              map [x] [map_volcanism_y].volcanism = tonumber (line:sub (current_colon + 1, next_colon - 1))
            end
          
            current_colon = next_colon
            x = x + 1
          end
        
          map_volcanism_y = map_volcanism_y + 1
        
        elseif line:find ("PS_SV:") then
          local x = 0
          local current_colon = first_colon
          local next_colon

          while current_colon ~= nil do
            if map [x] == nil then
              map [x] = {}
            end
                
            if map [x] [map_savagery_y] == nil then
              map [x] [map_savagery_y] = {}
            end

            next_colon = line:find (":", current_colon + 1)
         
            if next_colon == nil then
              map [x] [map_savagery_y].savagery = tonumber (line:sub (current_colon + 1, end_bracket - 1))
            else
              map [x] [map_savagery_y].savagery = tonumber (line:sub (current_colon + 1, next_colon - 1))
            end
          
            current_colon = next_colon
            x = x + 1
          end
        
          map_savagery_y = map_savagery_y + 1        
        end
      end    
    end
  
    in_file:close()
 
    if map [0] == nil then
      for k = 0, param.dim_x - 1 do
        map [k] = {}
      end
        
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i] = {elevation = 200,
                         rainfall = 50,
                         temperature = 50,
                         drainage = 50,
                         volcanism = 50,
                         savagery = 50}  
        end
      end
    end
    
    if not map [0] [0].elevation then
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i].elevation = 200
        end
      end
    end
    
    if not map [0] [0].rainfall then
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i].rainfall = 50
        end
      end
    end
    
    if not map [0] [0].temperature then
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i].temperature = 50
        end
      end
    end
    
    if not map [0] [0].drainage then
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i].drainage = 50
        end
      end
    end
    
    if not map [0] [0].volcanism then
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i].volcanism = 50
        end
      end
    end
    
    if not map [0] [0].savagery then
      for i = 0, param.dim_y - 1 do
        for k = 0, param.dim_x - 1 do
          map [k] [i].savagery = 50
        end
      end
    end
        
    if param.pole == 0 then      --  none
      pole = -1
    
    elseif param.pole == 3 then  --  North
      pole = 0  
  
    elseif param.pole == 4 then  --  South
      pole = 1
  
    elseif param.pole == 5 then  --  Both
      pole = 2
    
    else                         --  Screwed up random one
      dfhack.color (COLOR_LIGHTRED)
      dfhack.println ("The pole parameter is screwed up. The pole has to be defined, not randomized.")
      dfhack.color (COLOR_RESET)
      return
    end

    --  Restore temperatures to play levels so they become WYSIWYG
    --
    for i = 0, param.dim_y - 1 do
      for k = 0, param.dim_x - 1 do
        local temperature = map [k] [i].temperature
        local elevation = map [k] [i].elevation
      
        if elevation >= 300 then
          temperature = temperature + elevation_temperature_mountain [elevation - 299]
        elseif elevation >= elevation_hill_2 then
          temperature = temperature - 2
        elseif elevation >= elevation_hill_1 then
          temperature = temperature - 1
        end

        if pole == -1 then  -- None
          --  We're done
        
        elseif pole == 0 then  --  North
          if param.dim_y == 257 then
            temperature = temperature + temperature_north_257 [i + 1]
          
          elseif param.dim_y == 129 then
            temperature = temperature + temperature_north_257 [i * 2 + 1]
          
          elseif param.dim_y == 65 then
            temperature = temperature + temperature_north_65 [i + 1]
          
          elseif param.dim_y == 33 then
            temperature = temperature + temperature_north_33 [i + 1]
          
          else  --  Should be 17, but we'll end up here for whacky ones as well.
            temperature = temperature + temperature_north_17 [i + 1]
          end
        
        elseif pole == 1 then  --  South
          if param.dim_y == 257 then
            temperature = temperature + temperature_north_257 [256 - i + 1]
          
          elseif param.dim_y == 129 then
            temperature = temperature + temperature_north_257 [(128 - i) * 2 + 1]
          
          elseif param.dim_y == 65 then
            temperature = temperature + temperature_north_65 [64 - i + 1]
          
          elseif param.dim_y == 33 then
            temperature = temperature + temperature_north_33 [32 - i + 1]
          
          else  --  Should be 17, but we'll end up here for whacky ones as well.
            temperature = temperature + temperature_north_17 [16 - i + 1]
          end
        
        else  --  Both
          if param.dim_y == 257 then
            local latitude = i
            if latitude > 128 then
              latitude = (256 - latitude) * 2
          
            else
              latitude = latitude * 2
            end
          
            temperature = temperature + temperature_north_257 [latitude + 1]
          
          elseif param.dim_y == 129 then
            local latitude = i
            if latitude > 64 then
              latitude = (128 - latitude) * 2
            
            else
              latitude = latitude * 2
            end
          
            temperature = temperature + temperature_north_257 [latitude * 2 + 1]
          
          elseif param.dim_y == 65 then
            local latitude = i
            if latitude > 32 then
              latitude = (64 - latitude) * 2
            
            else
              latitude = latitude * 2
            end
        
            temperature = temperature + temperature_north_65 [latitude + 1]
          
          elseif param.dim_y == 33 then
            local latitude = i
            if latitude > 16 then
              latitude = (32 - latitude) * 2
            
            else
              latitude = latitude * 2
            end
            temperature = temperature + temperature_north_33 [latitude + 1]
          
          else  --  Should be 17, but we'll end up here for whacky ones as well.
            local latitude = i
            if latitude > 8 then
              latitude = (16 - latitude) * 2
            
            else
              latitude = latitude * 2
            end
            temperature = temperature + temperature_north_17 [latitude + 1]
          end        
        end

        map [k] [i].temperature = temperature
      end
    end
  
    return true
  end

  --============================================================

  function Write ()
    local out_file = io.open (dfhack.getDFPath().."\\data\\init\\exported_map.txt", "w")

    out_file:write ("[WORLD_GEN]\n")
    out_file:write ("     [TITLE:" .. param.title .. "]\n")
    if param.seed then
      out_file:write ("     [SEED:" .. param.seed .. "]\n")
    end
    if param.history_seed then
      out_file:write ("     [HISTORY_SEED:" .. param.history_seed .. "]\n")
    end
    if param.name_seed then
      out_file:write ("     [NAME_SEED:" .. param.name_seed .. "]\n")
    end
    if param.creature_seed then
      out_file:write ("     [CREATURE_SEED:" .. param.creature_seed .. "]\n")
    end
    out_file:write ("     [DIM:" .. tostring (param.dim_x) .. ":" .. 
                                    tostring (param.dim_y) .. "]\n")
    out_file:write ("     [EMBARK_POINTS:" .. tostring (param.embark_points) .. "]\n")
    out_file:write ("     [END_YEAR:" .. tostring (param.end_year) .. "]\n")
    out_file:write ("     [BEAST_END_YEAR:"  .. tostring (param.beast_end_year) .. ":" .. 
                                                tostring (param.beast_end_year_percent) .. "]\n")
    out_file:write ("     [REVEAL_ALL_HISTORY:" .. tostring (param.reveal_all_history) .. "]\n")
    out_file:write ("     [CULL_HISTORICAL_FIGURES:" .. tostring (param.cull_historical_figures) .. "]\n")
    out_file:write ("     [ELEVATION:" .. tostring (param.ranges [0] [df.worldgen_range_type.ELEVATION]) .. ":" .. 
                                          tostring (param.ranges [1] [df.worldgen_range_type.ELEVATION]) .. ":" ..
                                           tostring (param.ranges [2] [df.worldgen_range_type.ELEVATION]) .. ":" ..
                                          tostring (param.ranges [3] [df.worldgen_range_type.ELEVATION]) .. "]\n")
    out_file:write ("     [RAINFALL:" .. tostring (param.ranges [0] [df.worldgen_range_type.RAINFALL]) .. ":" .. 
                                         tostring (param.ranges [1] [df.worldgen_range_type.RAINFALL]) .. ":" ..
                                           tostring (param.ranges [2] [df.worldgen_range_type.RAINFALL]) .. ":" ..
                                         tostring (param.ranges [3] [df.worldgen_range_type.RAINFALL]) .. "]\n")
    out_file:write ("     [TEMPERATURE:" .. tostring (param.ranges [0] [df.worldgen_range_type.TEMPERATURE]) .. ":" .. 
                                            tostring (param.ranges [1] [df.worldgen_range_type.TEMPERATURE]) .. ":" ..
                                            tostring (param.ranges [2] [df.worldgen_range_type.TEMPERATURE]) .. ":" ..
                                            tostring (param.ranges [3] [df.worldgen_range_type.TEMPERATURE]) .. "]\n")
    out_file:write ("     [DRAINAGE:" .. tostring (param.ranges [0] [df.worldgen_range_type.DRAINAGE]) .. ":" .. 
                                         tostring (param.ranges [1] [df.worldgen_range_type.DRAINAGE]) .. ":" ..
                                         tostring (param.ranges [2] [df.worldgen_range_type.DRAINAGE]) .. ":" ..
                                         tostring (param.ranges [3] [df.worldgen_range_type.DRAINAGE]) .. "]\n")
    out_file:write ("     [VOLCANISM:" .. tostring (param.ranges [0] [df.worldgen_range_type.VOLCANISM]) .. ":" .. 
                                          tostring (param.ranges [1] [df.worldgen_range_type.VOLCANISM]) .. ":" ..
                                          tostring (param.ranges [2] [df.worldgen_range_type.VOLCANISM]) .. ":" ..
                                          tostring (param.ranges [3] [df.worldgen_range_type.VOLCANISM]) .. "]\n")
    out_file:write ("     [SAVAGERY:" .. tostring (param.ranges [0] [df.worldgen_range_type.SAVAGERY]) .. ":" .. 
                                         tostring (param.ranges [1] [df.worldgen_range_type.SAVAGERY]) .. ":" ..
                                         tostring (param.ranges [2] [df.worldgen_range_type.SAVAGERY]) .. ":" ..
                                         tostring (param.ranges [3] [df.worldgen_range_type.SAVAGERY]) .. "]\n")
    out_file:write ("     [ELEVATION_FREQUENCY:" .. tostring (param.elevation_frequency [0]) .. ":" ..
                                                    tostring (param.elevation_frequency [1]) .. ":" ..
                                                    tostring (param.elevation_frequency [2]) .. ":" ..
                                                    tostring (param.elevation_frequency [3]) .. ":" ..
                                                    tostring (param.elevation_frequency [4]) .. ":" ..
                                                    tostring (param.elevation_frequency [5]) .. "]\n")
    out_file:write ("     [RAIN_FREQUENCY:" .. tostring (param.rain_frequency [0]) .. ":" ..
                                               tostring (param.rain_frequency [1]) .. ":" ..
                                               tostring (param.rain_frequency [2]) .. ":" ..
                                               tostring (param.rain_frequency [3]) .. ":" ..
                                               tostring (param.rain_frequency [4]) .. ":" ..
                                               tostring (param.rain_frequency [5]) .. "]\n")
    out_file:write ("     [DRAINAGE_FREQUENCY:" .. tostring (param.drainage_frequency [0]) .. ":" ..
                                                   tostring (param.drainage_frequency [1]) .. ":" ..
                                                   tostring (param.drainage_frequency [2]) .. ":" ..
                                                   tostring (param.drainage_frequency [3]) .. ":" ..
                                                   tostring (param.drainage_frequency [4]) .. ":" ..
                                                   tostring (param.drainage_frequency [5]) .. "]\n")
    out_file:write ("     [TEMPERATURE_FREQUENCY:" .. tostring (param.temperature_frequency [0]) .. ":" ..
                                                      tostring (param.temperature_frequency [1]) .. ":" ..
                                                        tostring (param.temperature_frequency [2]) .. ":" ..
                                                      tostring (param.temperature_frequency [3]) .. ":" ..
                                                      tostring (param.temperature_frequency [4]) .. ":" ..
                                                      tostring (param.temperature_frequency [5]) .. "]\n")
    out_file:write ("     [SAVAGERY_FREQUENCY:" .. tostring (param.savagery_frequency [0]) .. ":" ..
                                                   tostring (param.savagery_frequency [1]) .. ":" ..
                                                   tostring (param.savagery_frequency [2]) .. ":" ..
                                                   tostring (param.savagery_frequency [3]) .. ":" ..
                                                   tostring (param.savagery_frequency [4]) .. ":" ..
                                                   tostring (param.savagery_frequency [5]) .. "]\n")
    out_file:write ("     [VOLCANISM_FREQUENCY:" .. tostring (param.volcanism_frequency [0]) .. ":" ..
                                                    tostring (param.volcanism_frequency [1]) .. ":" ..
                                                    tostring (param.volcanism_frequency [2]) .. ":" ..
                                                    tostring (param.volcanism_frequency [3]) .. ":" ..
                                                    tostring (param.volcanism_frequency [4]) .. ":" ..
                                                    tostring (param.volcanism_frequency [5]) .. "]\n")
    out_file:write ("     [POLE:" .. pole_map [param.pole] .."]\n")
    out_file:write ("     [MINERAL_SCARCITY:" .. tostring (param.mineral_scarcity) .. "]\n")
    out_file:write ("     [MEGABEAST_CAP:" .. tostring (param.megabeast_cap) .. "]\n")
    out_file:write ("     [SEMIMEGABEAST_CAP:" .. tostring (param.semimegabeast_cap) .. "]\n")
    out_file:write ("     [TITAN_NUMBER:" .. tostring (param.titan_number) .. "]\n")
    out_file:write ("     [TITAN_ATTACK_TRIGGER:" .. tostring (param.titan_attack_trigger [0]) .. ":" ..
                                                     tostring (param.titan_attack_trigger [1]) .. ":" ..
                                                     tostring (param.titan_attack_trigger [2]).. "]\n")
    out_file:write ("     [DEMON_NUMBER:" .. tostring (param.demon_number) .. "]\n")
    out_file:write ("     [NIGHT_TROLL_NUMBER:" .. tostring (param.night_troll_number) .. "]\n")
    out_file:write ("     [BOGEYMAN_NUMBER:" .. tostring (param.bogeyman_number) .. "]\n")
    if dfhack.pcall (function () local dummy = param.nightmare_number end) then
      out_file:write ("     [NIGHTMARE_NUMBER:" .. tostring (param.nightmare_number) .. "]\n")
    end  
    out_file:write ("     [VAMPIRE_NUMBER:" .. tostring (param.vampire_number) .. "]\n")
    if dfhack.pcall (function () local dummy = param.werebeast_attack_trigger [0] end) then
      out_file:write ("     [WEREBEAST_ATTACK_TRIGGER:" .. tostring (param.werebeast_attack_trigger [0]) .. ":" .. 
                                                           tostring (param.werebeast_attack_trigger [1]) .. ":" ..
                                                           tostring (param.werebeast_attack_trigger [2]).. "]\n")
    end
    out_file:write ("     [WEREBEAST_NUMBER:" .. tostring (param.werebeast_number) .. "]\n")
    out_file:write ("     [SECRET_NUMBER:" .. tostring (param.secret_number) .. "]\n")
    out_file:write ("     [REGIONAL_INTERACTION_NUMBER:".. tostring (param.regional_interaction_number).. "]\n")
    out_file:write ("     [DISTURBANCE_INTERACTION_NUMBER:" .. tostring(param.disturbance_interaction_number) .. "]\n")
    out_file:write ("     [EVIL_CLOUD_NUMBER:" .. tostring (param.evil_cloud_number) .. "]\n")
    out_file:write ("     [EVIL_RAIN_NUMBER:" .. tostring (param.evil_rain_number) .. "]\n")
    out_file:write ("     [GENERATE_DIVINE_MATERIALS:" .. tostring (param.generate_divine_materials) .. "]\n")
    if dfhack.pcall (function () local dummy = param.allow_divination end) then
      out_file:write ("     [ALLOW_DIVINATION:" .. tostring (param.allow_divination) .. "]\n")
      out_file:write ("     [ALLOW_DEMONIC_EXPERIMENTS:" .. tostring (param.allow_demonic_experiments) .. "]\n")
      out_file:write ("     [ALLOW_NECROMANCER_EXPERIMENTS:" .. tostring (param.allow_necromancer_experiments) .. "]\n")
      out_file:write ("     [ALLOW_NECROMANCER_LIEUTENANTS:" .. tostring (param.allow_necromancer_lieutenants) .. "]\n")
      out_file:write ("     [ALLOW_NECROMANCER_GHOULS:" .. tostring (param.allow_necromancer_ghouls) .. "]\n")
      out_file:write ("     [ALLOW_NECROMANCER_SUMMONS:" .. tostring (param.allow_necromancer_summons) .. "]\n")
    end
    out_file:write ("     [GOOD_SQ_COUNTS:" .. tostring (param.good_sq_counts_0) .. ":" ..
                                               tostring (param.good_sq_counts_1) .. ":" ..
                                               tostring (param.good_sq_counts_2) .. "]\n")
    out_file:write ("     [EVIL_SQ_COUNTS:" .. tostring (param.evil_sq_counts_0) .. ":" ..
                                               tostring (param.evil_sq_counts_1) .. ":" ..
                                               tostring (param.evil_sq_counts_2) .. "]\n")
    out_file:write ("     [PEAK_NUMBER_MIN:" .. tostring (param.peak_number_min) .. "]\n")
    out_file:write ("     [PARTIAL_OCEAN_EDGE_MIN:" .. tostring (param.partial_ocean_edge_min) .. "]\n")
    out_file:write ("     [COMPLETE_OCEAN_EDGE_MIN:" .. tostring (param.complete_ocean_edge_min) .. "]\n")
    out_file:write ("     [VOLCANO_MIN:" .. tostring (param.volcano_min) .. "]\n")
    out_file:write ("     [REGION_COUNTS:SWAMP:" .. tostring (param.region_counts [0] [df.worldgen_region_type.SWAMP]) .. ":" ..
                                                    tostring (param.region_counts [1] [df.worldgen_region_type.SWAMP]) .. ":" ..
                                                    tostring (param.region_counts [2] [df.worldgen_region_type.SWAMP]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:DESERT:" .. tostring (param.region_counts [0] [df.worldgen_region_type.DESERT]) .. ":" ..
                                                     tostring (param.region_counts [1] [df.worldgen_region_type.DESERT]) .. ":" ..
                                                     tostring (param.region_counts [2] [df.worldgen_region_type.DESERT]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:FOREST:" .. tostring (param.region_counts [0] [df.worldgen_region_type.FOREST]) .. ":" ..
                                                     tostring (param.region_counts [1] [df.worldgen_region_type.FOREST]) .. ":" ..
                                                     tostring (param.region_counts [2] [df.worldgen_region_type.FOREST]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:MOUNTAINS:" .. tostring (param.region_counts [0] [df.worldgen_region_type.MOUNTAINS]) .. ":" ..
                                                        tostring (param.region_counts [1] [df.worldgen_region_type.MOUNTAINS]) .. ":" ..
                                                        tostring (param.region_counts [2] [df.worldgen_region_type.MOUNTAINS]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:OCEAN:" .. tostring (param.region_counts [0] [df.worldgen_region_type.OCEAN]) .. ":" ..
                                                    tostring (param.region_counts [1] [df.worldgen_region_type.OCEAN]) .. ":" ..
                                                    tostring (param.region_counts [2] [df.worldgen_region_type.OCEAN]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:GLACIER:" .. tostring (param.region_counts [0] [df.worldgen_region_type.GLACIER]) .. ":" ..
                                                      tostring (param.region_counts [1] [df.worldgen_region_type.GLACIER]) .. ":" ..
                                                      tostring (param.region_counts [2] [df.worldgen_region_type.GLACIER]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:TUNDRA:" .. tostring (param.region_counts [0] [df.worldgen_region_type.TUNDRA]) .. ":" ..
                                                     tostring (param.region_counts [1] [df.worldgen_region_type.TUNDRA]) .. ":" ..
                                                     tostring (param.region_counts [2] [df.worldgen_region_type.TUNDRA]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:GRASSLAND:" .. tostring (param.region_counts [0] [df.worldgen_region_type.GRASSLAND]) .. ":" ..
                                                        tostring (param.region_counts [1] [df.worldgen_region_type.GRASSLAND]) .. ":" ..
                                                        tostring (param.region_counts [2] [df.worldgen_region_type.GRASSLAND]) .. "]\n")
    out_file:write ("     [REGION_COUNTS:HILLS:" .. tostring (param.region_counts [0] [df.worldgen_region_type.HILLS]) .. ":" ..
                                                    tostring (param.region_counts [1] [df.worldgen_region_type.HILLS]) .. ":" ..
                                                    tostring (param.region_counts [2] [df.worldgen_region_type.HILLS]) .. "]\n")
    out_file:write ("     [EROSION_CYCLE_COUNT:" .. tostring (param.erosion_cycle_count) .. "]\n")
    out_file:write ("     [RIVER_MINS:" .. tostring (param.river_mins [0]) ..":" .. 
                                           tostring (param.river_mins [1]) .. "]\n")
    out_file:write ("     [PERIODICALLY_ERODE_EXTREMES:" .. tostring (param.periodically_erode_extremes) .. "]\n")
    out_file:write ("     [OROGRAPHIC_PRECIPITATION:" .. tostring (param.orographic_precipitation) .. "]\n")
    out_file:write ("     [SUBREGION_MAX:" .. tostring (param.subregion_max) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_COUNT:" .. tostring (param.cavern_layer_count) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_OPENNESS_MIN:" .. tostring (param.cavern_layer_openness_min) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_OPENNESS_MAX:" .. tostring (param.cavern_layer_openness_max) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_PASSAGE_DENSITY_MIN:" .. tostring (param.cavern_layer_passage_density_min) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_PASSAGE_DENSITY_MAX:" .. tostring (param.cavern_layer_passage_density_max) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_WATER_MIN:" .. tostring (param.cavern_layer_water_min) .. "]\n")
    out_file:write ("     [CAVERN_LAYER_WATER_MAX:" .. tostring (param.cavern_layer_water_max) .. "]\n")
    out_file:write ("     [HAVE_BOTTOM_LAYER_1:" .. tostring (boolean_to_int (param.have_bottom_layer_1)) .. "]\n")
    out_file:write ("     [HAVE_BOTTOM_LAYER_2:" .. tostring (boolean_to_int (param.have_bottom_layer_2)) .. "]\n")
    out_file:write ("     [LEVELS_ABOVE_GROUND:" .. tostring (param.levels_above_ground) .. "]\n")
    out_file:write ("     [LEVELS_ABOVE_LAYER_1:" .. tostring (param.levels_above_layer_1) .. "]\n")
    out_file:write ("     [LEVELS_ABOVE_LAYER_2:" .. tostring (param.levels_above_layer_2) .. "]\n")
    out_file:write ("     [LEVELS_ABOVE_LAYER_3:" .. tostring (param.levels_above_layer_3) .. "]\n")
    out_file:write ("     [LEVELS_ABOVE_LAYER_4:" .. tostring (param.levels_above_layer_4) .. "]\n")
    out_file:write ("     [LEVELS_ABOVE_LAYER_5:" .. tostring (param.levels_above_layer_5) .. "]\n")
    out_file:write ("     [LEVELS_AT_BOTTOM:" .. tostring (param.levels_at_bottom) .. "]\n")
    out_file:write ("     [CAVE_MIN_SIZE:" .. tostring (param.cave_min_size) .. "]\n")
    out_file:write ("     [CAVE_MAX_SIZE:" .. tostring (param.cave_max_size) .. "]\n")
    out_file:write ("     [MOUNTAIN_CAVE_MIN:" .. tostring (param.mountain_cave_min) .. "]\n")
    out_file:write ("     [NON_MOUNTAIN_CAVE_MIN:" .. tostring (param.non_mountain_cave_min) .. "]\n")
    out_file:write ("     [ALL_CAVES_VISIBLE:" .. tostring (param.all_caves_visible) .. "]\n")
    out_file:write ("     [SHOW_EMBARK_TUNNEL:" .. tostring (param.show_embark_tunnel) .. "]\n")
    out_file:write ("     [TOTAL_CIV_NUMBER:" .. tostring (param.total_civ_number) .. "]\n")
    out_file:write ("     [TOTAL_CIV_POPULATION:" .. tostring (param.total_civ_population) .. "]\n")
    out_file:write ("     [SITE_CAP:" .. tostring (param.site_cap) .. "]\n")
    out_file:write ("     [PLAYABLE_CIVILIZATION_REQUIRED:" .. tostring (param.playable_civilization_required) .. "]\n")
    out_file:write ("     [ELEVATION_RANGES:" .. tostring (param.elevation_ranges_0) .. ":" ..
                                                 tostring (param.elevation_ranges_1) .. ":" ..
                                                 tostring (param.elevation_ranges_2) .. "]\n")
    out_file:write ("     [RAIN_RANGES:" .. tostring (param.rain_ranges_0) .. ":" ..
                                            tostring (param.rain_ranges_1) .. ":" ..
                                            tostring (param.rain_ranges_2) .. "]\n")
    out_file:write ("     [DRAINAGE_RANGES:" .. tostring (param.drainage_ranges_0) .. ":" ..
                                                tostring (param.drainage_ranges_1) .. ":" ..
                                                tostring (param.drainage_ranges_2) .. "]\n")
    out_file:write ("     [SAVAGERY_RANGES:" .. tostring (param.savagery_ranges_0) .. ":" ..
                                                tostring (param.savagery_ranges_1) .. ":" ..
                                                tostring (param.savagery_ranges_2) .. "]\n")
    out_file:write ("     [VOLCANISM_RANGES:" .. tostring (param.volcanism_ranges_0) .. ":" ..
                                                 tostring (param.volcanism_ranges_1) .. ":" ..
                                                 tostring (param.volcanism_ranges_2) .. "]\n") 

    if not ignore_elevation then
      for i = 0, param.dim_y - 1 do
        out_file:write ("[PS_EL")
        for k = 0, param.dim_x - 1 do
          out_file:write (":" .. tostring (map [k] [i].elevation))
        end
       out_file:write ("]\n")
      end
    end

    if not ignore_rainfall then
      for i = 0, param.dim_y - 1 do
        out_file:write ("[PS_RF")
        for k = 0, param.dim_x - 1 do
          out_file:write (":" .. tostring (map [k] [i].rainfall))
        end
        out_file:write ("]\n")
      end
    end
    
    --  Temperature is adjusted based on poles and elevation.
    --

    if not ignore_temperature then
      for i = 0, param.dim_y - 1 do
        out_file:write ("[PS_TP")
        for k = 0, param.dim_x - 1 do
          local temperature = map [k] [i].temperature
          local elevation = map [k] [i].elevation
      
          if elevation >= 300 then
            temperature = temperature - elevation_temperature_mountain [elevation - 299]
          elseif elevation >= elevation_hill_2 then
            temperature = temperature + 2
          elseif elevation >= elevation_hill_1 then
            temperature = temperature + 1
          end

          if pole == -1 then  -- None
            --  We're done
        
          elseif pole == 0 then  --  North
            if param.dim_y == 257 then
              temperature = temperature - temperature_north_257 [i + 1]
          
            elseif param.dim_y == 129 then
              temperature = temperature - temperature_north_257 [i * 2 + 1]
          
            elseif param.dim_y == 65 then
              temperature = temperature - temperature_north_65 [i + 1]
          
            elseif param.dim_y == 33 then
              temperature = temperature - temperature_north_33 [i + 1]
          
            else  --  Should be 17, but we'll end up here for whacky ones as well.
              temperature = temperature - temperature_north_17 [i + 1]
            end
        
          elseif pole == 1 then  --  South
            if param.dim_y == 257 then
              temperature = temperature - temperature_north_257 [256 - i + 1]
          
            elseif param.dim_y == 129 then
              temperature = temperature - temperature_north_257 [(128 - i) * 2 + 1]
          
            elseif param.dim_y == 65 then
              temperature = temperature - temperature_north_65 [64 - i + 1]
          
            elseif param.dim_y == 33 then
              temperature = temperature - temperature_north_33 [32 - i + 1]
          
            else  --  Should be 17, but we'll end up here for whacky ones as well.
              temperature = temperature - temperature_north_17 [16 - i + 1]
            end
        
          else  --  Both
            if param.dim_y == 257 then
              local latitude = i
              if latitude > 128 then
                latitude = (256 - latitude) * 2
          
              else
                latitude = latitude * 2
              end
          
              temperature = temperature - temperature_north_257 [latitude + 1]
          
            elseif param.dim_y == 129 then
              local latitude = i
              if latitude > 64 then
                latitude = (128 - latitude) * 2
            
              else
                latitude = latitude * 2
              end
          
              temperature = temperature - temperature_north_257 [latitude * 2 + 1]
          
            elseif param.dim_y == 65 then
              local latitude = i
              if latitude > 32 then
                latitude = (64 - latitude) * 2
            
              else
                latitude = latitude * 2
              end
        
              temperature = temperature - temperature_north_65 [latitude + 1]
          
            elseif param.dim_y == 33 then
              local latitude = i
              if latitude > 16 then
                latitude = (32 - latitude) * 2
            
              else
                latitude = latitude * 2
              end
              temperature = temperature - temperature_north_33 [latitude + 1]
          
            else  --  Should be 17, but we'll end up here for whacky ones as well.
              local latitude = i
              if latitude > 8 then
                latitude = (16 - latitude) * 2
            
              else
                latitude = latitude * 2
              end
              temperature = temperature - temperature_north_17 [latitude + 1]
            end        
          end
      
          out_file:write (":" .. tostring (temperature))
        end
        out_file:write ("]\n")
      end
    end
  
    if not ignore_drainage then
      for i = 0, param.dim_y - 1 do
        out_file:write ("[PS_DR")
        for k = 0, param.dim_x - 1 do
          out_file:write (":" .. tostring (map [k] [i].drainage))
        end
        out_file:write ("]\n")
      end
    end
    
    if not ignore_volcanism then
      for i = 0, param.dim_y - 1 do
        out_file:write ("[PS_VL")
        for k = 0, param.dim_x - 1 do
          out_file:write (":" .. tostring (map [k] [i].volcanism))
        end
        out_file:write ("]\n")
      end
    end
    
    if not ignore_savagery then
      for i = 0, param.dim_y - 1 do
        out_file:write ("[PS_SV")
        for k = 0, param.dim_x - 1 do
          out_file:write (":" .. tostring (map [k] [i].savagery))
        end
        out_file:write ("]\n")
      end
    end
    
    out_file:flush()
    out_file:close()
  end
  
  --============================================================
  
  function check_tropicality_no_poles_world (temperature)
    local is_possible_tropical_area_by_latitude = false
    local is_tropical_area_by_latitude = false
    
    --  No poles => Temperature determines tropicality
    --
    if temperature >= 75 then
      is_possible_tropical_area_by_latitude = true
    end
    is_tropical_area_by_latitude = temperature >= 85
    
    return is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude
  end
  
  --============================================================
  
  function check_tropicality_north_pole_only_world (pos_y,
                                                    map_height)
    local v6
    local is_possible_tropical_area_by_latitude = false
    local is_tropical_area_by_latitude = false
    
    if map_height == 17 then
      v6 = pos_y * 16
      
    elseif map_height == 33 then
      v6 = pos_y * 8
      
    elseif map_height == 65 then
      v6 = pos_y * 4
      
    elseif map_height == 129 then
      v6 = pos_y * 2
    
    else
      v6 = pos_y
    end
    
    is_possible_tropical_area_by_latitude = v6 > 170
    is_tropical_area_by_latitude = v6 >= 200
    
    return is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude
  end
  
  --============================================================
  
  function check_tropicality_south_pole_only_world (pos_y,
                                                    map_height)
    local v6 = map_height - pos_y - 1
    local is_possible_tropical_area_by_latitude = false
    local is_tropical_area_by_latitude = false
    
    if map_height == 17 then
      v6 = v6 * 16
      
    elseif map_height == 33 then
      v6 = v6 * 8
      
    elseif map_height == 65 then
      v6 = v6 * 4
      
    elseif map_height == 129 then
      v6 = v6 * 2
    
    else
      v6 = v6
    end
    
      is_possible_tropical_area_by_latitude = v6 > 170
    is_tropical_area_by_latitude = v6 >= 200
        
    return is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude
  end
  
  --============================================================

  function check_tropicality_both_poles_world (pos_y,
                                               map_height)
    local v6
    local is_possible_tropical_area_by_latitude = false
    local is_tropical_area_by_latitude = false

    if pos_y < math.floor (map_height / 2) then
      v6 = 2 * pos_y
    
    else
      v6 = map_height + 2 * (math.floor (map_height / 2) - pos_y) - 1
      
      if v6 < 0 then
         v6 = 0
      end

      if v6 >= map_height then
        v6 = map_height - 1
      end
    end

    if map_height == 17 then
      v6 = v6 * 16
      
    elseif map_height == 33 then
      v6 = v6 * 8
      
    elseif map_height == 65 then
      v6 = v6 * 4
      
    elseif map_height == 129 then
      v6 = v6 * 2
    
    else
      v6 = v6
    end
    
    is_possible_tropical_area_by_latitude = v6 > 170
    is_tropical_area_by_latitude = v6 >= 200
    
    return is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude
  end
  
  --============================================================
  
  function check_tropicality (pos_y,
                              map_height,
                              temperature,
                              pole)
    
    if pole == -1 then  --  No poles
      return check_tropicality_no_poles_world (temperature)
                                            
    elseif pole == 0 then  --  North pole
      return check_tropicality_north_pole_only_world (pos_y,
                                                      map_height)
                                                      
    elseif pole == 1 then  --  South pole
      return check_tropicality_south_pole_only_world (pos_y,
                                                      map_height)
                                                      
    elseif pole == 2 then  -- Both poles
      return check_tropicality_both_poles_world (pos_y,
                                                 map_height)

    else
      return false, false
    end
  end
  
  --============================================================
  
  function get_parameter_percentage (flip_latitude,
                                     pos_y,
                                     rainfall,
                                     map_height)
    local result
    local ypos = pos_y
    
    if flip_latitude == -1 then  -- No poles
      return 100
      
    elseif flip_latitude == 1 then --  South pole
      ypos = map_height - ypos - 1
      
    elseif flip_latitude == 2 then  --  North and South pole
      if ypos < math.floor (map_height / 2) then
        ypos = ypos * 2
      
      else
        ypos = map_height + 2 * (math.floor (map_height / 2) - ypos) - 1
        if ypos < 0 then
          ypos = 0
        end
        
        if ypos >= map_height then
          ypos = map_height - 1
        end
      end
    end
    
    local latitude
    if map_height == 17 then
      latitude = 16 * ypos
    elseif map_height == 33 then
      latitude = 8 * ypos
    elseif map_height == 65 then
      latitude = 4 * ypos
    elseif map_height == 129 then
      latitude = 2 * ypos
    else
      latitude = ypos
    end
    
    if latitude > 220 then
      return 100

    elseif latitude > 190 and
           latitude < 201 then
      return 0

    elseif latitude >= 201 then
      result = rainfall + 16 * (latitude - 207)

    else
      result = 16 * (184 - latitude) - rainfall
    end
    
    if result < 0 then
      return 0
    elseif result > 100 then
      return 100
    else
      return result
    end      
  end
  
  --============================================================
   
  function get_region_parameter (pos_y,
                                 rainfall,
                                 map_height)
  
    local result = 100
    
    if map_height > 65 then  --  Medium & Large worlds
      return get_parameter_percentage (pole,
                                       pos_y,
                                       rainfall,
                                       map_height)
    end
    
    return result
  end
  
  --============================================================
  

  function get_ocean_biome (is_tropical_area_by_latitude,
                            temperature)
    if is_tropical_area_by_latitude then
      return df.biome_type.OCEAN_TROPICAL
    elseif temperature <= -5 then
      return df.biome_type.OCEAN_ARCTIC
    else
      return df.biome_type.OCEAN_TEMPERATE
    end
  end
  
  --============================================================
  
  function get_desert_biome (drainage)
    if drainage < 33 then
      return df.biome_type.DESERT_SAND
    elseif drainage < 66 then
      return df.biome_type.DESERT_ROCK
    else
      return df.biome_type.DESERT_BADLAND
    end
  end
  
  --============================================================
  
  function get_biome_grassland (is_possible_tropical_area_by_latitude,
                                is_tropical_area_by_latitude,
                                rainfall,
                                pos_y,
                                map_height)
       
    if (is_possible_tropical_area_by_latitude and
        get_region_parameter(pos_y, rainfall, map_height) < 66) or
       is_tropical_area_by_latitude then
      return df.biome_type.GRASSLAND_TROPICAL
    else
      return df.biome_type.GRASSLAND_TEMPERATE
    end
  end
  
  --============================================================

  function get_biome_savanna (is_possible_tropical_area_by_latitude,
                              is_tropical_area_by_latitude,
                              rainfall,
                              pos_y,
                              map_height)

    if is_tropical_area_by_latitude or
       (is_possible_tropical_area_by_latitude and
        get_region_parameter (pos_y, rainfall, map_height) <= 6) then
      return df.biome_type.SAVANNA_TROPICAL
    else
      return df.biome_type.SAVANNA_TEMPERATE
    end       
  end
  
  
  --============================================================

  function get_biome_desert_or_grassland_or_savanna (is_possible_tropical_area_by_latitude,
                                                     is_tropical_area_by_latitude,
                                                     vegetation,
                                                     drainage,
                                                     rainfall,
                                                     pos_y,
                                                     map_height)
    if vegetation < 10 then
      return get_desert_biome (drainage)
      
    elseif vegetation < 20 then
       return get_biome_grassland (is_possible_tropical_area_by_latitude,
                                   is_tropical_area_by_latitude,
                                   rainfall,
                                   pos_y,
                                   map_height)
    
    else
      return get_biome_savanna (is_possible_tropical_area_by_latitude,
                                is_tropical_area_by_latitude,
                                  rainfall,
                                  pos_y,
                                map_height)
    end
  end
  
  
  --============================================================

  function get_biome_shrubland (is_possible_tropical_area_by_latitude,
                                is_tropical_area_by_latitude,
                                rainfall,
                                pos_y,
                                map_height)

    if is_tropical_area_by_latitude or
      (is_possible_tropical_area_by_latitude and
       get_region_parameter (pos_y, rainfall, map_height) < 66) then
      return df.biome_type.SHRUBLAND_TROPICAL
    else
      return df.biome_type.SHRUBLAND_TEMPERATE
    end
  end
  
  --============================================================

  function get_biome_marsh (is_possible_tropical_area_by_latitude,
                            is_tropical_area_by_latitude,
                            salinity,
                            rainfall,
                            pos_y,
                            map_height)
    if salinity < 66 then
      if is_tropical_area_by_latitude or
         (is_possible_tropical_area_by_latitude and
          get_region_parameter (pos_y, rainfall, map_height) < 66) then
        return df.biome_type.MARSH_TROPICAL_FRESHWATER
      else
        return df.biome_type.MARSH_TEMPERATE_FRESHWATER
      end
      
    else
      if is_tropical_area_by_latitude or
         (is_possible_tropical_area_by_latitude and
          get_region_parameter (pos_y, rainfall, map_height) < 66) then
        return df.biome_type.MARSH_TROPICAL_SALTWATER
      else
        return df.biome_type.MARSH_TEMPERATE_SALTWATER
      end
    end
  end
  
  --============================================================

  function get_biome_shrubland_or_marsh (is_possible_tropical_area_by_latitude,
                                         is_tropical_area_by_latitude,
                                         drainage,
                                         salinity,
                                         rainfall,
                                         pos_y,
                                         map_height)
    if drainage < 33 then
      return get_biome_marsh (is_possible_tropical_area_by_latitude,
                              is_tropical_area_by_latitude,
                              salinity,
                              rainfall,
                              pos_y,
                              map_height)
    else
      return get_biome_shrubland (is_possible_tropical_area_by_latitude,
                                  is_tropical_area_by_latitude,
                                  rainfall,
                                  pos_y,
                                  map_height)
    end
  end
  
  --============================================================

  function get_biome_forest (is_possible_tropical_area_by_latitude,
                             is_tropical_area_by_latitude,
                             rainfall,
                             temperature,
                             pos_y,
                             map_height)
    local parameter = get_region_parameter (pos_y, rainfall, map_height)
    
    if is_possible_tropical_area_by_latitude then
      if (parameter < 66 or
          is_tropical_area_by_latitude) and
         rainfall < 75 then
         return df.biome_type.FOREST_TROPICAL_CONIFER
    
      elseif parameter < 66 then
         return df.biome_type.FOREST_TROPICAL_DRY_BROADLEAF
      
      elseif is_tropical_area_by_latitude then
         return df.biome_type.FOREST_TROPICAL_MOIST_BROADLEAF
        
      elseif rainfall < 75 or
             temperature < 65 then
        if temperature < 10 then
          return df.biome_type.FOREST_TAIGA
          
        else
          return df.biome_type.FOREST_TEMPERATE_CONIFER
        end
        
      else
         return df.biome_type.FOREST_TEMPERATE_BROADLEAF
      end
      
    else
      if rainfall < 75 or
         temperature < 65 then
           if temperature < 10 then
             return df.biome_type.FOREST_TAIGA
           else
             return df.biome_type.FOREST_TEMPERATE_CONIFER
           end
           
         else
          return df.biome_type.FOREST_TEMPERATE_BROADLEAF
         end
    end
  end
  
  --============================================================

  function get_biome_swamp (is_possible_tropical_area_by_latitude,
                            is_tropical_area_by_latitude,
                            salinity,
                            drainage,
                            rainfall,
                            pos_y,
                            map_height)
    local parameter = get_region_parameter (pos_y, rainfall, map_height)
    
    if is_possible_tropical_area_by_latitude then
      if salinity < 66 then
        if parameter < 66 or
           is_tropical_area_by_latitude then
          return df.biome_type.SWAMP_TROPICAL_FRESHWATER
        else
          return df.biome_type.SWAMP_TEMPERATE_FRESHWATER
        end
     
      elseif parameter < 66 or
             is_tropical_area_by_latitude then
        if drainage < 10 then
           return df.biome_type.SWAMP_MANGROVE
        else
          return df.biome_type.SWAMP_TROPICAL_SALTWATER
        end
        
      else
           return df.biome_type.SWAMP_TEMPERATE_SALTWATER
      end
    
    else
      if salinity < 66 then
           return df.biome_type.SWAMP_TEMPERATE_FRESHWATER
      else
           return df.biome_type.SWAMP_TEMPERATE_SALTWATER
      end
    end
  end
  
  --============================================================
  
  function get_biome_type (biome_pos_y,
                           map_height,
                           temperature,
                           elevation,
                           drainage,
                           rainfall,
                           salinity,
                           vegetation,
                           pole,
                           is_possible_tropical_area_by_latitude,
                           is_tropical_area_by_latitude)
    
    if elevation >= 300 then  --  Adjusted to world gen elevations
         return df.biome_type.MOUNTAIN
      
    elseif elevation < 100 then
      return get_ocean_biome (is_tropical_area_by_latitude,
                              temperature)
                                
    elseif temperature <= -5 then
      if drainage < 75 then
           return df.biome_type.TUNDRA
      else
           return df.biome_type.GLACIER
      end
        
    elseif vegetation < 33 then
      return get_biome_desert_or_grassland_or_savanna (is_possible_tropical_area_by_latitude,
                                                       is_tropical_area_by_latitude,
                                                       vegetation,
                                                       drainage,
                                                       rainfall,
                                                       biome_pos_y,
                                                       map_height)
        
    elseif vegetation < 66 then
      return get_biome_shrubland_or_marsh (is_possible_tropical_area_by_latitude,
                                           is_tropical_area_by_latitude,
                                           drainage,
                                           salinity,
                                           rainfall,
                                           biome_pos_y,
                                           map_height)
        
    elseif drainage < 33 then
      return get_biome_swamp (is_possible_tropical_area_by_latitude,
                              is_tropical_area_by_latitude,
                              salinity,
                              drainage,
                              rainfall,
                              biome_pos_y,
                              map_height)
    else
      return get_biome_forest (is_possible_tropical_area_by_latitude,
                               is_tropical_area_by_latitude,
                               rainfall,
                               temperature,
                               biome_pos_y,
                               map_height)
    end
  end
  
  --============================================================

  function get_biome_character (biome_type)    
    if biome_type == df.biome_type.MOUNTAIN then
      return '+'      
    elseif biome_type == df.biome_type.GLACIER then
      return '*'
    elseif biome_type == df.biome_type.TUNDRA then
      return 't'
    elseif biome_type == df.biome_type.SWAMP_TEMPERATE_FRESHWATER then     --  Never generated
      return 'p'
    elseif biome_type == df.biome_type.SWAMP_TEMPERATE_SALTWATER then
      return 'r'
    elseif biome_type == df.biome_type.MARSH_TEMPERATE_FRESHWATER then     --  Never generated
      return 'n'
    elseif biome_type == df.biome_type.MARSH_TEMPERATE_SALTWATER then
      return 'y'
    elseif biome_type == df.biome_type.SWAMP_TROPICAL_FRESHWATER then      --  Never generated
      return 'P'
    elseif biome_type == df.biome_type.SWAMP_TROPICAL_SALTWATER then
      return 'R'
    elseif biome_type == df.biome_type.SWAMP_MANGROVE then
      return 'M'
    elseif biome_type == df.biome_type.MARSH_TROPICAL_FRESHWATER then      --  Never generated
      return 'N'
    elseif biome_type == df.biome_type.MARSH_TROPICAL_SALTWATER then
      return 'Y'
    elseif biome_type == df.biome_type.FOREST_TAIGA then
      return 'T'
    elseif biome_type == df.biome_type.FOREST_TEMPERATE_CONIFER then
      return 'c'
    elseif biome_type == df.biome_type.FOREST_TEMPERATE_BROADLEAF then
      return 'l'
    elseif biome_type == df.biome_type.FOREST_TROPICAL_CONIFER then
      return 'C'
    elseif biome_type == df.biome_type.FOREST_TROPICAL_DRY_BROADLEAF then
      return 'd'
    elseif biome_type == df.biome_type.FOREST_TROPICAL_MOIST_BROADLEAF then
      return 'L'
    elseif biome_type == df.biome_type.GRASSLAND_TEMPERATE then
      return 'g'
    elseif biome_type == df.biome_type.SAVANNA_TEMPERATE then
      return 's'
    elseif biome_type == df.biome_type.SHRUBLAND_TEMPERATE then
      return 'u'
    elseif biome_type == df.biome_type.GRASSLAND_TROPICAL then
      return 'G'
    elseif biome_type == df.biome_type.SAVANNA_TROPICAL then
      return 'S'
    elseif biome_type == df.biome_type.SHRUBLAND_TROPICAL then
      return 'U'
    elseif biome_type == df.biome_type.DESERT_BADLAND then
      return 'B'
    elseif biome_type == df.biome_type.DESERT_ROCK then
      return 'e'
    elseif biome_type == df.biome_type.DESERT_SAND then
      return 'D'
    elseif biome_type == df.biome_type.OCEAN_TROPICAL then
      return 'O'
    elseif biome_type == df.biome_type.OCEAN_TEMPERATE then
      return 'o'
    elseif biome_type == df.biome_type.OCEAN_ARCTIC then
      return 'a'
    elseif biome_type == df.biome_type.POOL_TEMPERATE_FRESHWATER then      --  Never generated
      return '.'
    elseif biome_type == df.biome_type.POOL_TEMPERATE_BRACKISHWATER then   --  Never generated
      return ':'
    elseif biome_type == df.biome_type.POOL_TEMPERATE_SALTWATER then       --  Never generated
      return '!'
    elseif biome_type == df.biome_type.POOL_TROPICAL_FRESHWATER then       --  Never generated
      return ','
    elseif biome_type == df.biome_type.POOL_TROPICAL_BRACKISHWATER then    --  Never generated
      return ';'
    elseif biome_type == df.biome_type.POOL_TROPICAL_SALTWATER then        --  Never generated
      return '|'
    elseif biome_type == df.biome_type.LAKE_TEMPERATE_FRESHWATER then      --  Never generated
      return '<'
    elseif biome_type == df.biome_type.LAKE_TEMPERATE_BRACKISHWATER then   --  Never generated
      return '-'
    elseif biome_type == df.biome_type.LAKE_TEMPERATE_SALTWATER then       --  Never generated
      return '['
    elseif biome_type == df.biome_type.LAKE_TROPICAL_FRESHWATER then       --  Never generated
      return '>'
    elseif biome_type == df.biome_type.LAKE_TROPICAL_BRACKISHWATER then    --  Never generated
      return '='
    elseif biome_type == df.biome_type.LAKE_TROPICAL_SALTWATER then        --  Never generated
      return ']'
    elseif biome_type == df.biome_type.RIVER_TEMPERATE_FRESHWATER then     --  Never generated
      return '\\'
    elseif biome_type == df.biome_type.RIVER_TEMPERATE_BRACKISHWATER then  --  Never generated
      return '%'
    elseif biome_type == df.biome_type.RIVER_TEMPERATE_SALTWATER then      --  Never generated
      return '('
    elseif biome_type == df.biome_type.RIVER_TROPICAL_FRESHWATER then      --  Never generated
      return '/'
    elseif biome_type == df.biome_type.RIVER_TROPICAL_BRACKISHWATER then   --  Never generated
      return '&'
    elseif biome_type == df.biome_type.RIVER_TROPICAL_SALTWATER then       --  Never generated
      return ')'
    elseif biome_type == df.biome_type.SUBTERRANEAN_WATER then             --  Never generated
      return '_'
    elseif biome_type == df.biome_type.SUBTERRANEAN_CHASM then             --  Never generated
      return '^'
    elseif biome_type == df.biome_type.SUBTERRANEAN_LAVA then              --  Never generated
      return '~'
    end
  end

  --============================================================

  function match_biome (s)
    if s == '+' then
      return df.biome_type.MOUNTAIN

    elseif s == '*' then
      return df.biome_type.GLACIER
      
    elseif s == 't' then
      return df.biome_type.TUNDRA
      
    elseif s == 'r' then
      return df.biome_type.SWAMP_TEMPERATE_SALTWATER
      
    elseif s == 'y' then
      return df.biome_type.MARSH_TEMPERATE_SALTWATER
     
    elseif s == 'R' then
      return df.biome_type.SWAMP_TROPICAL_SALTWATER
       
    elseif s == 'M' then
      return df.biome_type.SWAMP_MANGROVE
      
    elseif s == 'Y' then
      return df.biome_type.MARSH_TROPICAL_SALTWATER
      
    elseif s == 'T' then
      return df.biome_type.FOREST_TAIGA
      
    elseif s == 'c' then
      return df.biome_type.FOREST_TEMPERATE_CONIFER
      
    elseif s == 'l' then
      return df.biome_type.FOREST_TEMPERATE_BROADLEAF
      
    elseif s == 'C' then
      return df.biome_type.FOREST_TROPICAL_CONIFER
      
    elseif s == 'd' then
      return df.biome_type.FOREST_TROPICAL_DRY_BROADLEAF
      
    elseif s == 'L' then 
      return df.biome_type.FOREST_TROPICAL_MOIST_BROADLEAF
      
    elseif s == 'g' then
      return df.biome_type.GRASSLAND_TEMPERATE
      
    elseif s == 's' then
      return df.biome_type.SAVANNA_TEMPERATE
      
    elseif s == 'u' then
      return df.biome_type.SHRUBLAND_TEMPERATE
      
    elseif s == 'G' then 
      return df.biome_type.GRASSLAND_TROPICAL
      
    elseif s == 'S' then 
      return df.biome_type.SAVANNA_TROPICAL
      
    elseif s == 'U' then 
      return df.biome_type.SHRUBLAND_TROPICAL
      
    elseif s == 'B' then
      return df.biome_type.DESERT_BADLAND
      
    elseif s == 'e' then
      return df.biome_type.DESERT_ROCK
      
    elseif s == 'D' then
      return df.biome_type.DESERT_SAND
      
    elseif s == 'O' then
      return df.biome_type.OCEAN_TROPICAL
      
    elseif s == 'o' then
      return df.biome_type.OCEAN_TEMPERATE
      
    elseif s == 'a' then
      return df.biome_type.OCEAN_ARCTIC
    else
      return nil
    end
  end
  
  --============================================================

  function supported_biome_list (is_possible_tropical_area_by_latitude,
                                 is_tropical_area_by_latitude,
                                 pole,
                                 pos_y)
    local result = "supported biomes\n"
    
    for i = df.biome_type.MOUNTAIN, df.biome_type.OCEAN_ARCTIC do
      if is_possible_biome (i,
                            is_possible_tropical_area_by_latitude,
                            is_tropical_area_by_latitude,
                            pole,
                            pos_y) then
        result = result .. get_biome_character (i) .. " = " .. df.biome_type [i] .. "\n"
      end
    end
    
    return result
  end
  
  --============================================================
  
  
  function is_possible_biome (biome_type,
                              is_possible_tropical_area_by_latitude,
                              is_tropical_area_by_latitude,
                              pole,
                              pos_y)
                              
    if biome_type == df.biome_type.MOUNTAIN then
      return true  
      
    elseif biome_type == df.biome_type.GLACIER then
      return true
      
    elseif biome_type == df.biome_type.TUNDRA then
      return true
      
    elseif biome_type == df.biome_type.SWAMP_TEMPERATE_FRESHWATER then     --  Never generated
      return false
      
    elseif biome_type == df.biome_type.SWAMP_TEMPERATE_SALTWATER then
      return pole == -1 or
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
               (get_region_parameter (pos_y,
                                       66,
                                      param.dim_y) >= 66 or
                get_region_parameter (pos_y,
                                       100,
                                      param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.MARSH_TEMPERATE_FRESHWATER then     --  Never generated
      return false
      
    elseif biome_type == df.biome_type.MARSH_TEMPERATE_SALTWATER then
      return pole == -1 or 
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     33,
                                     param.dim_y) >= 66 or
               get_region_parameter (pos_y,
                                     65,
                                     param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.SWAMP_TROPICAL_FRESHWATER then      --  Never generated
      return false
      
    elseif biome_type == df.biome_type.SWAMP_TROPICAL_SALTWATER then
      return pole == -1 or
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     66,
                                     param.dim_y) < 66 or
               get_region_parameter (pos_y,
                                     100,
                                     param.dim_y) < 66))
      
    elseif biome_type == df.biome_type.SWAMP_MANGROVE then
      return pole == -1 or 
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     66,
                                     param.dim_y) < 66 or
               get_region_parameter (pos_y,
                                     100,
                                     param.dim_y) < 66))
      
    elseif biome_type == df.biome_type.MARSH_TROPICAL_FRESHWATER then      --  Never generated
      return false
      
    elseif biome_type == df.biome_type.MARSH_TROPICAL_SALTWATER then
      return pole == -1 or 
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     33,
                                     param.dim_y) < 66 or
               get_region_parameter (pos_y,
                                     65,
                                     param.dim_y) < 66))
      
    elseif biome_type == df.biome_type.FOREST_TAIGA then
      return pole == -1 or
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     66,
                                     param.dim_y) >= 66 or
               get_region_parameter (pos_y,
                                     100,
                                     param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.FOREST_TEMPERATE_CONIFER then
      return pole == -1 or
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     66,
                                     param.dim_y) >= 66 or
               get_region_parameter (pos_y,
                                     74,
                                     param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.FOREST_TEMPERATE_BROADLEAF then
      return pole == -1 or
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     75,
                                     param.dim_y) >= 66 or
               get_region_parameter (pos_y,
                                     100,
                                     param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.FOREST_TROPICAL_CONIFER then
      return pole == -1 or 
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     66,
                                     param.dim_y) < 66 or
               get_region_parameter (pos_y,
                                     74,
                                     param.dim_y) < 66))
      
    elseif biome_type == df.biome_type.FOREST_TROPICAL_DRY_BROADLEAF then
      return is_possible_tropical_area_by_latitude and
             (get_region_parameter (pos_y,
                                    75,
                                    param.dim_y) < 66 or
              get_region_parameter (pos_y,
                                    100,
                                    param.dim_y) < 66)
      
    elseif biome_type == df.biome_type.FOREST_TROPICAL_MOIST_BROADLEAF then
      return pole == -1 or
             (is_tropical_area_by_latitude and
              get_region_parameter (pos_y,
                                    100,
                                    param.dim_y) >= 66)
      
    elseif biome_type == df.biome_type.GRASSLAND_TEMPERATE then
      return pole == -1 or 
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     10,
                                     param.dim_y) >= 66 or
               get_region_parameter (pos_y,
                                     19,
                                     param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.SAVANNA_TEMPERATE then
      return pole == -1 or 
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     20,
                                     param.dim_y) >= 6 or
               get_region_parameter (pos_y,
                                     32,
                                     param.dim_y) >= 6))
      
    elseif biome_type == df.biome_type.SHRUBLAND_TEMPERATE then
      return pole == -1 or 
             not is_possible_tropical_area_by_latitude or
             (not is_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     33,
                                     param.dim_y) >= 66 or
               get_region_parameter (pos_y,
                                     65,
                                     param.dim_y) >= 66))
      
    elseif biome_type == df.biome_type.GRASSLAND_TROPICAL then
      return pole == -1 or
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     10,
                                     param.dim_y) < 66 or
               get_region_parameter (pos_y,
                                     19,
                                     param.dim_y) < 66))
      
    elseif biome_type == df.biome_type.SAVANNA_TROPICAL then
      return pole == -1 or 
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     20,
                                     param.dim_y) < 6 or
               get_region_parameter (pos_y,
                                     32,
                                     param.dim_y) < 6))
      
    elseif biome_type == df.biome_type.SHRUBLAND_TROPICAL then
      return pole == -1 or
             is_tropical_area_by_latitude or
             (is_possible_tropical_area_by_latitude and
              (get_region_parameter (pos_y,
                                     33,
                                     param.dim_y) < 66 or
               get_region_parameter (pos_y,
                                     65,
                                     param.dim_y) < 66))
      
    elseif biome_type == df.biome_type.DESERT_BADLAND then
      return true
      
    elseif biome_type == df.biome_type.DESERT_ROCK then
      return true
      
    elseif biome_type == df.biome_type.DESERT_SAND then
      return true
      
    elseif biome_type == df.biome_type.OCEAN_TROPICAL then
      return pole == -1 or is_tropical_area_by_latitude
      
    elseif biome_type == df.biome_type.OCEAN_TEMPERATE then
      return pole == -1 or not is_tropical_area_by_latitude
      
    elseif biome_type == df.biome_type.OCEAN_ARCTIC then
      return pole == -1 or not is_tropical_area_by_latitude
      
    elseif biome_type == df.biome_type.POOL_TEMPERATE_FRESHWATER then      --  Never generated
      return false
      
    elseif biome_type == df.biome_type.POOL_TEMPERATE_BRACKISHWATER then   --  Never generated
      return false
      
    elseif biome_type == df.biome_type.POOL_TEMPERATE_SALTWATER then       --  Never generated
      return false
      
    elseif biome_type == df.biome_type.POOL_TROPICAL_FRESHWATER then       --  Never generated
      return false
      
    elseif biome_type == df.biome_type.POOL_TROPICAL_BRACKISHWATER then    --  Never generated
      return false
      
    elseif biome_type == df.biome_type.POOL_TROPICAL_SALTWATER then        --  Never generated
      return false
      
    elseif biome_type == df.biome_type.LAKE_TEMPERATE_FRESHWATER then      --  Never generated
      return false
      
    elseif biome_type == df.biome_type.LAKE_TEMPERATE_BRACKISHWATER then   --  Never generated
      return false
      
    elseif biome_type == df.biome_type.LAKE_TEMPERATE_SALTWATER then       --  Never generated
      return false
      
    elseif biome_type == df.biome_type.LAKE_TROPICAL_FRESHWATER then       --  Never generated
      return false
      
    elseif biome_type == df.biome_type.LAKE_TROPICAL_BRACKISHWATER then    --  Never generated
      return false
      
    elseif biome_type == df.biome_type.LAKE_TROPICAL_SALTWATER then        --  Never generated
      return false
      
    elseif biome_type == df.biome_type.RIVER_TEMPERATE_FRESHWATER then     --  Never generated
      return false
      
    elseif biome_type == df.biome_type.RIVER_TEMPERATE_BRACKISHWATER then  --  Never generated
      return false
      
    elseif biome_type == df.biome_type.RIVER_TEMPERATE_SALTWATER then      --  Never generated
      return false
      
    elseif biome_type == df.biome_type.RIVER_TROPICAL_FRESHWATER then      --  Never generated
      return false
      
    elseif biome_type == df.biome_type.RIVER_TROPICAL_BRACKISHWATER then   --  Never generated
      return false
      
    elseif biome_type == df.biome_type.RIVER_TROPICAL_SALTWATER then       --  Never generated
      return false
      
    elseif biome_type == df.biome_type.SUBTERRANEAN_WATER then             --  Never generated
      return false
      
    elseif biome_type == df.biome_type.SUBTERRANEAN_CHASM then             --  Never generated
      return false
      
    elseif biome_type == df.biome_type.SUBTERRANEAN_LAVA then              --  Never generated
      return false     
    end
  end  
  
  --============================================================

  function make_biome (biome_type,
                       is_possible_tropical_area_by_latitude,
                       is_tropical_area_by_latitude,
                       parameters,
                       pole,
                       pos_y)
    local par = parameters
    
    if not is_possible_biome (biome_type,
                              is_possible_tropical_area_by_latitude,
                              is_tropical_area_by_latitude,
                              pole,
                              pos_y) then
      dialog.showMessage("Failure", "Requested biome cannot be created (here)", COLOR_RED)
      return par
    end
    
    if biome_type == df.biome_type.MOUNTAIN then
      if par.elevation < 300 then
        par.elevation = 350
      end
      
    elseif biome_type == df.biome_type.GLACIER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature > -5 then
        par.temperature = -30
      end
      
      if par.drainage < 75 then
        par.drainage = 85
      end
      
    elseif biome_type == df.biome_type.TUNDRA then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature > -5 then
        par.temperature = -30
      end
      
      if par.drainage >= 75 then
        par.drainage = 30
      end
      
    elseif biome_type == df.biome_type.SWAMP_TEMPERATE_SALTWATER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature >= 75) then
        par.temperature = 20
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 66 then
          par.rainfall = 85
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                        66,
                                       param.dim_y) >= 66 then
        par.rainfall = 66        
      else
        par.rainfall = 100
      end
      
      if par.drainage >= 33 then
        par.drainage = 20
      end
      
    elseif biome_type == df.biome_type.MARSH_TEMPERATE_SALTWATER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature >= 75) then
        par.temperature = 20
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 33 or par.rainfall >= 66 then  --  Proxy for vegetation
          par.rainfall = 50
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       33,
                                       param.dim_y) >= 66 then
        par.rainfall = 33        
      else
        par.rainfall = 65
      end
      
      if par.drainage >= 33 then
        par.drainage = 20
      end
            
    elseif biome_type == df.biome_type.SWAMP_TROPICAL_SALTWATER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85)  then
        par.temperature = 90
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 66 then  --  Proxy for vegetation
          par.rainfall = 85
        end
      
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       66,
                                       param.dim_y) < 66 then
        par.rainfall = 66    
      else
        par.rainfall = 100
      end
      
      if par.drainage >= 33 or par.drainage < 10 then
        par.drainage = 20
      end
                 
    elseif biome_type == df.biome_type.SWAMP_MANGROVE then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85)  then
        par.temperature = 90
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 66 then  --  Proxy for vegetation
          par.rainfall = 85
        end
      
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       66,
                                       param.dim_y) < 66 then
        par.rainfall = 66    
      else
        par.rainfall = 100
      end
      
      if par.drainage >= 10 then
        par.drainage = 5
      end                 
      
    elseif biome_type == df.biome_type.MARSH_TROPICAL_SALTWATER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 33 or par.rainfall >= 66 then  --  Proxy for vegetation
          par.rainfall = 50
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       33,
                                       param.dim_y) < 66 then
        par.rainfall = 33    
      else
        par.rainfall = 65
      end

      if par.drainage >= 33 then
        par.drainage = 20
      end
                  
    elseif biome_type == df.biome_type.FOREST_TAIGA then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or par.temperature > 10 then
        par.temperature = 0
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 66 then
          par.rainfall = 85
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       66,
                                       param.dim_y) >= 66 then
        par.rainfall = 66        
      else
        par.rainfall = 100
      end
      
      if par.drainage < 33 then
        par.drainage = 65
      end
      
    elseif biome_type == df.biome_type.FOREST_TEMPERATE_CONIFER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < 10 or par.temperature >= 65 then
        par.temperature = 20
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 66 or par.rainfall > 74 then
          par.rainfall = 70
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       66,
                                       param.dim_y) >= 66 then
        par.rainfall = 66        
      else
        par.rainfall = 74
      end
      
      if par.drainage < 33 then
        par.drainage = 65
      end
      
    elseif biome_type == df.biome_type.FOREST_TEMPERATE_BROADLEAF then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < 65 or
         (pole == -1 and par.temperature >= 85) then
        par.temperature = 70
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 75 then
          par.rainfall = 85
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       75,
                                       param.dim_y) >= 66 then
        par.rainfall = 75
      else
        par.rainfall = 100
      end        
      
      if par.drainage < 33 then
        par.drainage = 65
      end
      
    elseif biome_type == df.biome_type.FOREST_TROPICAL_CONIFER then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end
      
      if is_tropical_area_by_latitude then
        if par.rainfall < 66 or par.rainfall > 74 then
          par.rainfall = 70
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       66,
                                       param.dim_y) < 66 then
        par.rainfall = 66
      else
        par.rainfall = 74
      end
      
      if par.drainage < 33 then
        par.drainage = 65
      end
      
    elseif biome_type == df.biome_type.FOREST_TROPICAL_DRY_BROADLEAF then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end
            
      if get_parameter_percentage (pole,
                                   pos_y,
                                    75,
                                    param.dim_y) < 66 then
        par.rainfall = 75
      else
        par.rainfall = 100
      end
      
      if par.drainage < 33 then
        par.drainage = 65
      end
      
    elseif biome_type == df.biome_type.FOREST_TROPICAL_MOIST_BROADLEAF then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end
      
      par.rainfall = 100
      
      if par.drainage < 33 then
        par.drainage = 65
      end     
      
    elseif biome_type == df.biome_type.GRASSLAND_TEMPERATE then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature >= 85) then
        par.temperature = 20
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 10 or par.rainfall > 19 then
          par.rainfall = 15
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       10,
                                       param.dim_y) >= 66 then
        par.rainfall = 10
      else
        par.rainfall = 19
      end
      
    elseif biome_type == df.biome_type.SAVANNA_TEMPERATE then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature >= 85) then
        par.temperature = 20
      end
      
      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 20 or par.rainfall > 32 then
          par.rainfall = 25
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       20,
                                       param.dim_y) >= 6 then
        par.rainfall = 20
      else
        par.rainfall = 32
      end
      
    elseif biome_type == df.biome_type.SHRUBLAND_TEMPERATE then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature >= 85) then
        par.temperature = 20
      end

      if not is_possible_tropical_area_by_latitude then
        if par.rainfall < 33 or par.rainfall > 65 then
          par.rainfall = 50
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       33,
                                       param.dim_y) >= 66 then
        par.rainfall = 33
      else
        par.rainfall = 65
      end
      
      if par.drainage < 33 then
        par.drainage = 65
      end     
      
    elseif biome_type == df.biome_type.GRASSLAND_TROPICAL then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end
      
      if is_tropical_area_by_latitude then
        if par.rainfall < 10 or par.rainfall > 19 then
          par.rainfall = 15
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       10,
                                       param.dim_y) < 66 then
        par.rainfall = 10
      else
        par.rainfall = 19
      end
      
    elseif biome_type == df.biome_type.SAVANNA_TROPICAL then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end
      
      if is_tropical_area_by_latitude then
        if par.rainfall < 20 or par.rainfall > 32 then
          par.rainfall = 25
        end
    
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       20,
                                       param.dim_y) < 6 then
        par.rainfall = 20
      else
        par.rainfall = 32
      end
      
    elseif biome_type == df.biome_type.SHRUBLAND_TROPICAL then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 or
         (pole == -1 and par.temperature < 85) then
        par.temperature = 90
      end

      if is_tropical_area_by_latitude then
        if par.rainfall < 33 or par.rainfall > 65 then
          par.rainfall = 50
        end
        
      elseif get_parameter_percentage (pole,
                                       pos_y,
                                       33,
                                       param.dim_y) < 66 then
        par.rainfall = 33
      else
        par.rainfall = 65
      end
      
      if par.drainage < 33 then
        par.drainage = 65
      end     
      
    elseif biome_type == df.biome_type.DESERT_BADLAND then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 then
        par.temperature = 70
      end
      
      if par.rainfall >= 10 then
        par.rainfall = 6
      end
      
      if par.drainage < 66 then
        par.drainage = 85
      end
      
    elseif biome_type == df.biome_type.DESERT_ROCK then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 then
        par.temperature = 70
      end
      
      if par.rainfall >= 10 then
        par.rainfall = 6
      end
      
      if par.drainage < 33 or par.drainage >= 66 then
        par.drainage = 50
      end      
      
    elseif biome_type == df.biome_type.DESERT_SAND then
      if par.elevation < 100 or par.elevation >= 300 then
        par.elevation = 150
      end
      
      if par.temperature < -5 then
        par.temperature = 70
      end
      
      if par.rainfall >= 10 then
        par.rainfall = 6
      end
      
      if par.drainage >= 33 then
        par.drainage = 15
      end      
      
    elseif biome_type == df.biome_type.OCEAN_TROPICAL then
      if par.elevation >= 100 then
        par.elevation = 50
      end
      
      if pole == -1 and par.temperature < 85 then
        par.temperature = 90
      end
      
    elseif biome_type == df.biome_type.OCEAN_TEMPERATE then
      if par.elevation >= 100 then
        par.elevation = 50
      end
      
      if par.temperature <= -5 or
         (pole == -1 and par.temperature >= 85) then
        par.temperature = 20
      end
      
    elseif biome_type == df.biome_type.OCEAN_ARCTIC then
      if par.elevation >= 100 then
        par.elevation = 50
      end
      
      if par.temperature > -5 then
        par.temperature = -20
      end
      
    else
      dialog.showMessage("Failure", "Requested biome cannot be created", COLOR_RED)    
    end
    
    return par
  end
  
  --============================================================

   function BiomeColor (savagery)
    if savagery < 33 then
      return COLOR_LIGHTBLUE
    elseif savagery < 66 then
      return COLOR_YELLOW
    else
      return COLOR_RED
      end
  end

  --============================================================

  function LatitudeColor (is_possible_tropical_area_by_latitude, 
                          is_tropical_area_by_latitude,
                          pole)
    if pole == -1 then
      return COLOR_WHITE    
    elseif is_tropical_area_by_latitude then
      return COLOR_RED
    elseif is_possible_tropical_area_by_latitude then
      return COLOR_YELLOW
    else
      return COLOR_GREEN
    end
  end
    
  --============================================================
  
  function fit_biome (s)
    return s .. string.rep (' ', string.len ('FOREST_TROPICAL_MOIST_BROADLEAF') - string.len (s))  --  The longest name
  end
  
  --============================================================

  function fit_value (x)
    if x >= 100 then
      return tostring (x)
    elseif x >= 10 then
      return " " .. tostring (x)
    elseif x <= -10 then
      return tostring (x)
    elseif x <= -1 then
      return " " .. tostring (x)
    else
      return "  " ..  tostring (x)
    end
  end
  
  --============================================================

  function Transform (x, y)
     local info_line = 1
     local ch
     local fg
     local bg
     local tile_color
     local is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude = 
       check_tropicality (cursor_y,
                          param.dim_y,
                              map [cursor_x] [cursor_y].temperature,  --  Disable when no pole.
                          pole)
                    
    tWorld = {{text="Help",
                   key=keybindings.help.key,
                   key_sep = '()'}, 
                  " X = ",
                  tostring (x),
                  ", Y = ",
                  tostring (y),
                  " World View\n"}
    
    table.insert (tWorld, "Biome: " .. 
                            fit_biome (df.biome_type [get_biome_type 
                             (cursor_y,
                              param.dim_y,
                              map [cursor_x] [cursor_y].temperature,
                              map [cursor_x] [cursor_y].elevation,
                              map [cursor_x] [cursor_y].drainage,
                              map [cursor_x] [cursor_y].rainfall,
                              100,  --  We don't have access to salinity pre world gen
                              map [cursor_x] [cursor_y].rainfall,  --  We don't have access to vegetation pre world gen. It seems to always be identical to rainfall, though.
                              pole,
                              is_possible_tropical_area_by_latitude,
                              is_tropical_area_by_latitude)]) .. " ")
                     
    table.insert (tWorld, "\n")
    
    table.insert (tWorld, "Cursor X:    " .. fit_value (cursor_x) .. "\n")
    table.insert (tWorld, "Cursor Y:    " .. fit_value (cursor_y) .. "\n")                     
    table.insert (tWorld, "Elevation:   " .. fit_value (map [cursor_x] [cursor_y].elevation) .. "\n")                    
    table.insert (tWorld, "Rainfall:    " .. fit_value (map [cursor_x] [cursor_y].rainfall) .. "\n")
    table.insert (tWorld, "Temperature: " .. fit_value (map [cursor_x] [cursor_y].temperature) .. "\n")
    table.insert (tWorld, "Drainage:    " .. fit_value (map [cursor_x] [cursor_y].drainage) .. "\n")
    table.insert (tWorld, "Volcanism:   " .. fit_value (map [cursor_x] [cursor_y].volcanism) .. "\n")
    table.insert (tWorld, "Savagery:    " .. fit_value (map [cursor_x] [cursor_y].savagery) .. "\n")
    table.insert (tWorld, "Ignored\n")
    
    if ignore_elevation then
      table.insert (tWorld, "Elevation Ignored")
    end
    table.insert (tWorld, "\n")
    
    if ignore_rainfall then
      table.insert (tWorld, "Rainfall Ignored")
    end
    table.insert (tWorld, "\n")
    
    if ignore_temperature then
      table.insert (tWorld, "Temp Ignored")
    end
    table.insert (tWorld, "\n")
    
    if ignore_drainage then
      table.insert (tWorld, "Drainage Ignored")
    end
    table.insert (tWorld, "\n")
    
    if ignore_volcanism then
      table.insert (tWorld, "Volcanism Ignored")      
    end
    table.insert (tWorld, "\n")
    
    if ignore_savagery then
      table.insert (tWorld, "Savagery Ignored")
    end
    table.insert (tWorld, "\n")
                     
    for i = 0, 3 do
      for k = 0, 3 do
        Map_Grid:set (k, i, {ch = ' ',
                             fg = COLOR_WHITE,
                             bg = COLOR_BLACK,
                             bold = false,
                             tile = nil,
                             tile_color = false,
                             tile_fg = nil,
                             tile_bg = nil})      
      end
    end
    
    for i = 4, param.dim_x + 3 do
      ch = tostring (math.floor ((i - 4) / 100))
      if ch == '0' then
        ch = ' '
      end
      
      Map_Grid:set (i, 0, {ch = ch,
                           fg = COLOR_WHITE,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})
                           
      ch = tostring (math.floor (((i - 4) % 100) / 10))
      if i - 4 < 100 and ch == '0' then
        ch = ' '
      end
      
      Map_Grid:set (i, 1, {ch = ch,
                           fg = COLOR_WHITE,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})
    
      ch = tostring ((i - 4) % 10)
      
      Map_Grid:set (i, 2, {ch = ch,
                           fg = COLOR_WHITE,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})

      Map_Grid:set (i, 3, {ch = '_',
                           fg = COLOR_WHITE,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})
    end
    
    for i = 4, param.dim_y + 3 do
      is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude = 
          check_tropicality (i - 4,
                             param.dim_y,
                                 0,  --  Disabled when no pole
                             pole)
      
      fg = LatitudeColor (is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude, pole)
      
      ch = tostring (math.floor ((i - 4) / 100))
      if ch == '0' then
        ch = ' '
      end
      
      Map_Grid:set (0, i, {ch = ch,
                           fg = fg,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})
                           
      ch = tostring (math.floor (((i - 4) % 100) / 10))
      if i - 4 < 100 and ch == '0' then
        ch = ' '
      end
      
      Map_Grid:set (1, i, {ch = ch,
                           fg = fg,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})
    
      ch = tostring ((i - 4) % 10)
      
      Map_Grid:set (2, i, {ch = ch,
                           fg = fg,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})

      Map_Grid:set (3, i, {ch = '|',
                           fg = fg,
                           bg = COLOR_BLACK,
                           bold = false,
                           tile = nil,
                           tile_color = false,
                           tile_fg = nil,
                           tile_bg = nil})
    end
    
    for i = 0, param.dim_y - 1 do
      for k = 0, param.dim_x - 1 do
        is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude = 
            check_tropicality (i,
                               param.dim_y,
                                 map [k] [i].temperature,
                                pole)
                               
        ch = get_biome_character (get_biome_type 
                                  (i,
                                   param.dim_y,
                                   map [k] [i].temperature,
                                   map [k] [i].elevation,
                                   map [k] [i].drainage,
                                   map [k] [i].rainfall,
                                   100,  --  We don't have access to salinity pre world gen
                                   map [k] [i].rainfall,  --  We don't have access to vegetation pre world gen. It seems to always be identical to rainfall, though.
                                   pole,
                                   is_possible_tropical_area_by_latitude,
                                   is_tropical_area_by_latitude))
                                   
        if cursor_x == k and cursor_y == i then
          fg = COLOR_BLACK
          bg = BiomeColor (map [k] [i].savagery)
          tile_color = true
          
        else
          fg = BiomeColor (map [k] [i].savagery)
          bg = COLOR_BLACK
          tile_color = false
        end    

        Map_Grid:set (k + 4,
                      i + 4,
                       {ch = ch,
                      fg = fg,
                      bg = bg,
                      bold = false,
                      tile = nil,
                      tile_color = tile_color,
                      tile_fg = nil,
                      tile_bg = nil})              
      end
    end    
  end
  
  --==============================================================

  function Update (delta_x, delta_y, pages)
    x = x + delta_x
    if x < 0 then
      x = 0
    elseif x >= param.dim_x then
      x = param.dim_x - 1
    end

    y = y + delta_y
    if y < 0 then
      y = 0
    elseif y >= param.dim_y then
      y = param.dim_y - 1
    end

    cursor_x = x
    cursor_y = y
    
    Map_Grid:panCenter (x, y)
    Transform (x, y)
  
    local worldPage = widgets.Panel {
        subviews=
         {widgets.Label {text = tWorld,
            frame = {l = 1, t = 1, yalign = 0}}}}

    pages.subviews[1].subviews[1].text_lines = worldPage.subviews[1].text_lines
  end
  
  --============================================================

  function Disclaimer (tlb)
    local dsc = {
    "Tweakmap is the second half of the exportmap/tweakmap script pair. The purpose of this pair is to generate a DF map,", NEWLINE,
    "export it with exportmap as a world generation parameter set with PSV data, and then modify the world map tiles around", NEWLINE,
    "your intended future embark to your liking, save the modified parameter set, and then bring that set into world_gen.txt", NEWLINE,
    "as parameters to generate your actual game world from.", NEWLINE,
    "Exportmap performs a couple of tricks: it transforms the world elevation values back to generation values (the ranges", NEWLINE,
    "differ), and it transforms temperatures such that the exported values should generate the same temperatures when applied",NEWLINE,
    "for a new world generation. DF transforms the PSV temperatures based on latitude and elevation, and exportmap attempts", NEWLINE,
    "to apply a compensation for that distortion. Tweakmap, meanwhile, transforms temperatures back to what they will be in", NEWLINE,
    "the game, to allow WYSIWYG editing of values, and will reapply the counter distortion when saving the world generation", NEWLINE,
    "data. Tweakmap is capable of reading an exported_map.txt file containing just world parameters, in which case it will", NEWLINE,
    "create default PSV data for every tile just as the World Painter does, but with tweaked temperatures. However, it does", NEWLINE,
    "support the generation of partial PSV data sets. Thus, it can be used stand alone, as a replacement of World Painter,", NEWLINE,
    "provided you start with a world parameter set (those used by advanced world generation) in exported_map.txt", NEWLINE,
    "Tweakmap uses DF as a display engine, but otherwise doesn't interact with the world (if any: it doesn't require anything", NEWLINE,
    "to be loaded).", NEWLINE,
    "On start tweakmap reads the file .\\data\\init\\exported_map.txt generated by exportmap. The PSV set is then visualized", NEWLINE,
    "as an overlay on DF's main window using a character representation that's described below.", NEWLINE,
    "You can change the 6 PSV values supported by DF by hitting the corresponding key (see above) and then enter a new value", NEWLINE,
    "for that parameter for the cursor selected tile. You can also specify a biome to place at that tile, and tweakmap will", NEWLINE,
    "change parameters as necessary to generate that biome. Note that biome placement is subject to the DF restrictions on", NEWLINE,
    "where biomes can appear with respect to latitude, and the biome selection window lists the available ones.", NEWLINE,
    "The PSV set does not support Salinity, so the swamp/marsh biomes cannot be fully specified. An assumed salinity of 100", NEWLINE,
    "is used by tweakmap for such biomes, because Mangrove Swamp is a high salinity one, but the user should be aware that", NEWLINE,
    "actual salinity is subject to DF's whims. Lakes are likewise not present in PSV data, and thus cannot be defined (DF", NEWLINE,
    "will, again, use its internal logic to place these, as well as rivers, streams, brooks, and pools).", NEWLINE,
    "It's possible to specify tweakmap to ignore saving one or more PSV parameters to let DF generate those parameters freely", NEWLINE,
    "it's probably not useful for any parameters except Volcanism, however, as biomes specifications then get knocked out.", NEWLINE,
    "You can save your modified parameter/PSV set by hitting the appropriate key, and the .\\data\\init\\exported_map.txt", NEWLINE,
    "file is replaced. Using <ESC> to exit tweakmap will exit without saving, although you can escape back to the main", NEWLINE,
    "window from this help.", NEWLINE, NEWLINE,
    "Legends: The biomes displayed in the map are encoded using a character to depict the biome and color to indicate savagery", NEWLINE,
    "(note that evilness cannot be displayed as it's not a PSV parameter). In addition, the vertical 'latitude' indices are", NEWLINE,
    "color coded to indicate the temperate, tropical, and 'maybe' zone in between them when the map has at least one pole.", NEWLINE, NEWLINE,

    "Biome color coding key:    ",
    {text = "Calm         ", pen = dfhack.pen.parse {fg = COLOR_LIGHTBLUE, bg = 0}},
    {text = "Normal       ", pen = dfhack.pen.parse {fg = COLOR_YELLOW, bg = 0}},
    {text = "Savage       ", pen = dfhack.pen.parse {fg = COLOR_RED, bg = 0}}, NEWLINE,
    "Latitude color coding key: ",
    {text = "Tropical     ", pen = dfhack.pen.parse {fg = COLOR_RED, bg = 0}},
    {text = "Undetermined ", pen = dfhack.pen.parse {fg = COLOR_YELLOW, bg = 0}},
    {text = "Temperate    ", pen = dfhack.pen.parse {fg = COLOR_GREEN, bg = 0}}, NEWLINE, NEWLINE,
    
    "The biome character symbols use lower case for the temperate version and upper case for the tropical one. The one exception is d/D.", NEWLINE, NEWLINE,
    "Normal                                                         ", NEWLINE,
    "a = Arctic Ocean",NEWLINE,
    "                               B = Badlands                    ", NEWLINE,
    "c = Temperate Conifer          C = Tropical Conifer            ", NEWLINE,
    "d = Dry Tropical Broadleaf     D = Sand Desert                 ", NEWLINE,
    "e = Rocky Desert                                               ", NEWLINE,
    "g = Temperate Grassland        G = Tropical Grassland          ", NEWLINE,
    "l = Temperate Broadleaf        L = Tropical Moist Broadleaf    ", NEWLINE,
    "                               M = Mangrove Swamp              ", NEWLINE,
    "o = Temperate Ocean            O = Tropical Ocean              ", NEWLINE,
    "r = Temperate Saltwater Swamp  R = Tropical Saltwater Swamp    ", NEWLINE,
    "s = Temperate Savanna          S = Tropical Savanna            ", NEWLINE,
    "t = Tundra                     T = Taiga                       ", NEWLINE,
    "u = Temperate Shrubland        U = Tropical Shrubland          ", NEWLINE,
    "Y = Temperate Saltwater Marsh  Y = Tropical Saltwater Marsh    ", NEWLINE,
    "+ = Mountain                   * = Glacier                     ", NEWLINE, NEWLINE,
    "The cursor is indicated by a black biome indication character on a savagery color background, i.e. inversed colors.", NEWLINE, NEWLINE,
    "Disclaimers, caveats, info, etc:", NEWLINE,
    "- There are 6 parameter that determine a bimome (not all of them for all biomes). They are Elevation, Rainfall, Temperature,", NEWLINE,
    "  Drainage, Salinity, and Vegetation. The last two are not available as PSV parameters, although it seems Vegetation always", NEWLINE,
    "  matches Rainfall. It can be noted that the PSV parameters Volcanism and Savagery do not affect biomes as such.", NEWLINE,
    "- The method used to transform between PSV and world temperatures is a clunky set of translation maps. The author has not", NEWLINE,
    "  been able to deduce any formulas for these.", NEWLINE,
    "- The method used to set a biome at a world map tile changes the parameters that need to be changed to values values needed", NEWLINE, 
    "  to ensure the generation of the biome, attempting to leave other parameters unchanged. The user is encouraged to further", NEWLINE,
    "  tweak parameters (e.g. to ensure appearance of trees on embark, but no regrowth in desert type biomes).", NEWLINE,
    "- Currently no attempt is made to tweak parameters such that the biomes of neighboring tiles can generate the corresponding", NEWLINE,
    "  biomes of the opposite tropicality on prospective embarks. The users are encouraged to perform such tweaks themselves using", NEWLINE,
    "  the detailed parameter change methods.", NEWLINE, NEWLINE,
    "Version 0.8, 2017-11-23"}

    if tlb then
        for _,v in ipairs(dsc) do
            table.insert(tlb,v)
        end
    end
    return dsc
  end

  --============================================================

  function Screen_Resized (w, h)
    if Map_Grid ~= NIL then
      local grid_rect_width
      local grid_rect_height
      local x
      local y
      
      Map_Grid.frame.w = math.min (Map_Grid.width, w - 1 - Map_Grid.frame.l)
      Map_Grid.frame.h = math.min (Map_Grid.height, h - 1 - Map_Grid.frame.t)
      
      x = Map_Grid.viewport.x1
      y = Map_Grid.viewport.y1
      
      Map_Grid.viewport = {x1 = 0,
                           x2 = Map_Grid.frame.w - 1,
                           y1 = 0,
                           y2 = Map_Grid.frame.h - 1}
               
      Map_Grid:pan (x, y)
    end
  end
  
  --============================================================

  MapTweakerUi = defclass (MapTweakerUi, ResizeFramedScreen)
  MapTweakerUi.ATTRS = {
    frame_style = gui.GREY_LINE_FRAME,
    frame_title = "Map Tweaker",
    Resize_Callback = (function (w, h) Screen_Resized (w, h) end)
  }

  --============================================================

  function MapTweakerUi:onHelp ()
    Focus = "Help"
    self.subviews.pages:setSelected (2)
  end

  --============================================================

  function MapTweakerUi:init ()
    self.stack = {}
    self.item_count = 0
    self.keys = {}
    local helptext = {{text="Help"}, NEWLINE, NEWLINE}
    
    local move_key = {}
    local move_key_index = 0
    local normal_key = {}
    local normal_key_index = 0
    local screen_width, screen_height = dfhack.screen.getWindowSize()
    local grid_rect_width
    local grid_rect_height
    
    for k,v in pairs(keybindings) do
      if df.interface_key [v.key] >= df.interface_key.CURSOR_UP and
         df.interface_key [v.key] <= df.interface_key.CURSOR_DOWN_Z then
          move_key_index = move_key_index + 1
        move_key [move_key_index] = v
         
      else
        normal_key_index = normal_key_index + 1
        normal_key [normal_key_index] = v
      end
    end
    
    for i = 1, normal_key_index - 1 do
      for k = i, normal_key_index do
        if df.interface_key [normal_key [i].key] > 
           df.interface_key [normal_key [k].key] then
           local temp = normal_key [i]
           normal_key [i] = normal_key [k]
           normal_key [k] = temp
        end
      end
    end
    
    for i = 1, move_key_index - 1 do
      for k = i, move_key_index do
        if df.interface_key [move_key [i].key] > 
           df.interface_key [move_key [k].key] then
           local temp = move_key [i]
           move_key [i] = move_key [k]
           move_key [k] = temp
        end
      end
    end

    local help_length
    if move_key_index > normal_key_index then
      help_length = move_key_index
    else
      help_length = normal_key_index
    end
    
    for i = 1, help_length do
      if i <= normal_key_index then
        table.insert (helptext, {text = normal_key [i].desc, key = normal_key [i].key, key_sep = ": "})
      else
        table.insert (helptext, string.rep (" ", string.len (normal_key [1].desc) + 3))
      end
      
      if i <= move_key_index then
        table.insert (helptext, {text = move_key [i].desc, key = move_key [i].key, key_sep = ": "})
      end
      table.insert (helptext, NEWLINE)
    end

    table.insert(helptext,NEWLINE)

    Disclaimer (helptext)

    Read ()
    
    if 23 + param.dim_x < screen_width - 1 then
      grid_rect_width = param.dim_x
    else
      grid_rect_width = screen_width - 25
    end
    
    if 4 + param.dim_y < screen_height - 1 then
      grid_rect_height = param.dim_y
    else
      grid_rect_height = screen_height - 9
    end
    
    Map_Grid = Grid {frame = {l = 19,
                              t = 4,
                              w = math.min (param.dim_x + 4, screen_width - 19 - 1),
                              h = math.min (param.dim_y + 4, screen_height - 4 - 1)},
                              width = param.dim_x + 4,
                              height = param.dim_y + 4,
                              visible = true}
                              
    Transform (x, y)
        
    local worldPage = widgets.Panel {
        subviews=
         {widgets.Label {text = tWorld,
            frame = {l = 1, t = 1, yalign = 0}},
          Map_Grid}}

    local helpPage = widgets.Panel{
        subviews = {widgets.Label {text = helptext,
                  frame = {l = 1, t = 1, yalign = 0}}}}

    local pages = widgets.Pages 
      {subviews={worldPage,
                 helpPage}, view_id = "pages"}

    self:addviews{
        pages
    }
  end
  
  --==============================================================
  
  function MapTweakerUi:updateBiome (value)
     local is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude = 
       check_tropicality (cursor_y,
                          param.dim_y,
                              0,  --  Disable when no pole.
                          pole)

    local biome_type = match_biome (value)
    
    if not biome_type then
      dialog.showMessage ("Error!", "The Biome specification has to be one of the character depicting a biome (see Help page)", COLOR_RED)
    else
      map [cursor_x] [cursor_y] = make_biome (biome_type,
                                              is_possible_tropical_area_by_latitude,
                                              is_tropical_area_by_latitude,
                                              map [cursor_x] [cursor_y],
                                              pole,
                                              cursor_y)
    end

    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateElevation (value)
    if not tonumber (value) or 
       tonumber (value) < 1 or 
       tonumber (value) > 400 then
      dialog.showMessage ("Error!", "The Elevation legal range is 1 - 400", COLOR_RED)
    else
      map [cursor_x] [cursor_y].elevation = tonumber (value)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateRainfall (value)
    if not tonumber (value) or
       tonumber (value) < 0 or
       tonumber (value) > 100 then
      dialog.showMessage ("Error!", "The Rainfall legal range is 0 - 100", COLOR_RED)
    else
      map [cursor_x] [cursor_y].rainfall = tonumber (value)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateTemperature (value)
    if not tonumber (value) or
       tonumber (value) < -1000 or
       tonumber (value) > 1000 then
      dialog.showMessage ("Error!", "The Temperature legal range is -1000 - 1000", COLOR_RED)
    else
      map [cursor_x] [cursor_y].temperature = tonumber (value)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateDrainage (value)
    if not tonumber (value) or
       tonumber (value) < 0 or
       tonumber (value) > 100 then
      dialog.showMessage ("Error!", "The Drainage legal range is 0 - 100", COLOR_RED)
    else
      map [cursor_x] [cursor_y].drainage = tonumber (value)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateVolcanism (value)
    if not tonumber (value) or
       tonumber (value) < 0 or
       tonumber (value) > 100 then
      dialog.showMessage ("Error!", "The Volcanism legal range is 0 - 100", COLOR_RED)
    else
      map [cursor_x] [cursor_y].volcanism = tonumber (value)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateSavagery (value)
    if not tonumber (value) or
       tonumber (value) < 0 or
       tonumber (value) > 100 then
      dialog.showMessage ("Error!", "The Savagery legal range is 0 - 100", COLOR_RED)
    else
      map [cursor_x] [cursor_y].savagery = tonumber (value)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:updateIgnore (value)
    if value == 'e' then
      ignore_elevation = not ignore_elevation
    elseif value == 'r' then
      ignore_rainfall = not ignore_rainfall
    elseif value == 't' then
      ignore_temperature = not ignore_temperature
    elseif value == 'd' then
      ignore_drainage = not ignore_drainage
    elseif value == 'v' then
      ignore_volcanism = not ignore_volcanism
    elseif value == 's' then
      ignore_savagery = not ignore_savagery
    else
      dialog.showMessage ("None of the legal choices ('e', 'r', 't', 'd', 'v', 's'", COLOR_RED)
    end
    
    Update (0, 0, self.subviews.pages)      
  end
  
  --==============================================================
  
  function MapTweakerUi:onInput (keys)
    if keys.LEAVESCREEN_ALL then
      self:dismiss()
    end
    
    if keys.LEAVESCREEN then
      if Focus == "Help" then
        Focus = "Main"
        self.subviews.pages:setSelected (1)
      
      else
        self:dismiss()
      end
    end

    if keys[keybindings.tweakmap.key] then
      Focus = "Main"
      self.subviews.pages:setSelected (1)

    elseif keys [keybindings.biome.key] and Focus == "Main" then
      local is_possible_tropical_area_by_latitude, is_tropical_area_by_latitude = 
        check_tropicality (cursor_y,
                           param.dim_y,
                               0,  --  Disable when no pole.
                           pole)

      dialog.showInputPrompt("Biome", 
                             supported_biome_list (is_possible_tropical_area_by_latitude,
                                                   is_tropical_area_by_latitude,
                                                   pole,
                                                   cursor_y) .. 
                             "Biome:",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateBiome"))
      
    elseif keys [keybindings.elevation.key] and Focus == "Main" then
      dialog.showInputPrompt("Elevation", 
                             "Elevation (" .. tostring (map [cursor_x] [cursor_y].elevation) .."):",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateElevation"))

    elseif keys [keybindings.rainfall.key] and Focus == "Main" then
      dialog.showInputPrompt("Rainfall", 
                             "Rainfall (" .. tostring (map [cursor_x] [cursor_y].rainfall) .."):",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateRainfall"))

    elseif keys [keybindings.temperature.key] and Focus == "Main" then
      dialog.showInputPrompt("Temperature",
                             "Temperature (" .. tostring (map [cursor_x] [cursor_y].temperature) .."):",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateTemperature"))

    elseif keys [keybindings.drainage.key] and Focus == "Main" then
      dialog.showInputPrompt("Drainage", 
                             "Drainage (" .. tostring (map [cursor_x] [cursor_y].drainage) .."):",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateDrainage"))

    elseif keys [keybindings.volcanism.key] and Focus == "Main" then
      dialog.showInputPrompt("Volcanism",
                             "Volcanism (" .. tostring (map [cursor_x] [cursor_y].volcanism) .."):",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateVolcanism"))

    elseif keys [keybindings.savagery.key] and Focus == "Main" then
      dialog.showInputPrompt("Savagery",
                             "Savagery (" .. tostring (map [cursor_x] [cursor_y].savagery) .."):",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateSavagery"))

    elseif keys [keybindings.write_file.key] then
      Write ()

    elseif keys [keybindings.save_exit.key] then
      Write ()
      self:dismiss ()
      
    elseif keys [keybindings.copy.key] and Focus == "Main" then
      copy_set = {elevation = map [cursor_x] [cursor_y].elevation,
                  rainfall = map [cursor_x] [cursor_y].rainfall,
                  temperature = map [cursor_x] [cursor_y].temperature,
                  drainage = map [cursor_x] [cursor_y].drainage,
                  volcanism = map [cursor_x] [cursor_y].volcanism,
                  savagery = map [cursor_x] [cursor_y].savagery}
      
    elseif keys [keybindings.paste.key] and Focus == "Main" then
      map [cursor_x] [cursor_y] = {elevation = copy_set.elevation,
                                   rainfall = copy_set.rainfall,
                                   temperature = copy_set.temperature,
                                   drainage = copy_set.drainage,
                                   volcanism = copy_set.volcanism,
                                   savagery = copy_set.savagery}
      
      Update (0, 0, self.subviews.pages)      

    elseif keys [keybindings.ignore.key] and Focus == "Main" then
      dialog.showInputPrompt("Toggle Ignoring of Parameter",
                             "Ignoring (e)levation (" .. tostring (ignore_elevation) ..")\n" ..
                             "Ignoring (r)ainfall (" .. tostring (ignore_rainfall) ..")\n" ..
                             "Ignoring (t)emperature (" .. tostring (ignore_temperature) .. ")\n" ..
                             "Ignoring (d)rainage (" .. tostring (ignore_drainage) .. ")\n" ..
                             "Ignoring (v)olcanism (" .. tostring (ignore_volcanism) .. ")\n" ..
                             "Ignoring (s)avagery (" .. tostring (ignore_savagery) .. ")\n" ..
                             "Toggle Parameter:",
                             COLOR_WHITE,
                             "",
                             self:callback ("updateIgnore"))
    
    elseif keys[keybindings.up.key] and Focus == "Main" then      
        Update (0, -1, self.subviews.pages)

    elseif keys[keybindings.down.key] and Focus == "Main" then
        Update (0, 1, self.subviews.pages)

    elseif keys[keybindings.left.key] and Focus == "Main" then
        Update (-1, 0, self.subviews.pages)

    elseif keys[keybindings.right.key] and Focus == "Main" then
        Update (1, 0, self.subviews.pages)
      
    elseif keys[keybindings.upleft.key] and Focus == "Main" then
        Update (-1, -1, self.subviews.pages)
      
    elseif keys[keybindings.upright.key] and Focus == "Main" then
        Update (1, -1, self.subviews.pages)
      
    elseif keys[keybindings.downleft.key] and Focus == "Main" then
        Update (-1, 1, self.subviews.pages)
      
    elseif keys[keybindings.downright.key] and Focus == "Main" then
        Update (1, 1, self.subviews.pages)
      
    elseif keys[keybindings.up_fast.key] and Focus == "Main" then
        Update (0, -10, self.subviews.pages)
      
    elseif keys[keybindings.down_fast.key] and Focus == "Main" then
        Update (0, 10, self.subviews.pages)
      
    elseif keys[keybindings.left_fast.key] and Focus == "Main" then
        Update (-10, 0, self.subviews.pages)

    elseif keys[keybindings.right_fast.key] and Focus == "Main" then
        Update (10, 0, self.subviews.pages)
      
    elseif keys[keybindings.upleft_fast.key] and Focus == "Main" then
        Update (-10, -10, self.subviews.pages)
      
    elseif keys[keybindings.upright_fast.key] and Focus == "Main" then
        Update (10, -10, self.subviews.pages)
      
    elseif keys[keybindings.downleft_fast.key] and Focus == "Main" then
        Update (-10, 10, self.subviews.pages)
      
    elseif keys[keybindings.downright_fast.key] and Focus == "Main" then
        Update (10, 10, self.subviews.pages)    
    end
  end

  --==============================================================
  
  function show_viewer()
    local screen = MapTweakerUi{}
    persist_screen=screen
    screen:show()
  end

  show_viewer()
end

--==============================================================

tweakmap()


